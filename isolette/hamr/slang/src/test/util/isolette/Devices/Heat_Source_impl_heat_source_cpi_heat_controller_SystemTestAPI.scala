// #Sireum

package isolette.Devices

import org.sireum._
import art._
import isolette.SystemTestSuiteSlang.runtimeMonitorStream
import isolette._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Heat_Source_impl_heat_source_cpi_heat_controller_SystemTestAPI {
  /** helper method to set the values of all incoming ports
    * @param api_heat_control incoming data port
    */
  def put_concrete_inputs(api_heat_control: Isolette_Data_Model.On_Off.Type): Unit = {
    put_heat_control(api_heat_control)
  }

  // setter for incoming data port
  def put_heat_control(value: Isolette_Data_Model.On_Off.Type): Unit = {
    Art.insertInInfrastructurePort(Arch.isolette_single_sensor_Instance_heat_source_cpi_heat_controller.operational_api.heat_control_Id, Isolette_Data_Model.On_Off_Payload(value))
  }

  def fetchContainer(): isolette.Devices.Heat_Source_impl_heat_source_cpi_heat_controller_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.isolette_single_sensor_Instance_heat_source_cpi_heat_controller.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.isolette_single_sensor_Instance_heat_source_cpi_heat_controller.id).get
      return postContainer_.asInstanceOf[isolette.Devices.Heat_Source_impl_heat_source_cpi_heat_controller_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.isolette_single_sensor_Instance_heat_source_cpi_heat_controller.name}")
      halt(s"No post state recorded for ${Arch.isolette_single_sensor_Instance_heat_source_cpi_heat_controller.name}")
    }
  }

  def check_concrete_outputs(api_heat_out: Isolette_Environment.Heat.Type): Unit = {
    var failureReasons: ISZ[ST] = ISZ()

    val actual_heat_out = get_api_heat_out()
    if (api_heat_out != actual_heat_out) {
      failureReasons = failureReasons :+ st"'heat_out' did not match expected.  Expected: $api_heat_out, Actual: $actual_heat_out"
    }

    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }

  def get_api_heat_out(): Isolette_Environment.Heat.Type = {
    return fetchContainer().api_heat_out
  }
}