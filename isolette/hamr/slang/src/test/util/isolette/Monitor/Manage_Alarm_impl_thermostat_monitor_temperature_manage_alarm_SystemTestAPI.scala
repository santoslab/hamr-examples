// #Sireum

package isolette.Monitor

import org.sireum._
import art._
import isolette.SystemTestSuiteSlang.runtimeMonitorStream
import isolette._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_SystemTestAPI {
  /** helper method to set the values of all incoming ports and state variables
    * @param In_lastCmd pre-state state variable
    * @param api_current_tempWstatus incoming data port
    * @param api_lower_alarm_temp incoming data port
    * @param api_monitor_mode incoming data port
    * @param api_upper_alarm_temp incoming data port
    */
  def put_concrete_inputs(In_lastCmd: Isolette_Data_Model.On_Off.Type,
                          api_current_tempWstatus: Isolette_Data_Model.TempWstatus_impl,
                          api_lower_alarm_temp: Isolette_Data_Model.Temp_impl,
                          api_monitor_mode: Isolette_Data_Model.Monitor_Mode.Type,
                          api_upper_alarm_temp: Isolette_Data_Model.Temp_impl): Unit = {
    put_In_lastCmd(In_lastCmd)
    put_current_tempWstatus(api_current_tempWstatus)
    put_lower_alarm_temp(api_lower_alarm_temp)
    put_monitor_mode(api_monitor_mode)
    put_upper_alarm_temp(api_upper_alarm_temp)
  }

  // setter for state variable
  def put_In_lastCmd(value: Isolette_Data_Model.On_Off.Type): Unit = {
    Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm.lastCmd = value
  }

  // setter for incoming data port
  def put_current_tempWstatus(value: Isolette_Data_Model.TempWstatus_impl): Unit = {
    Art.insertInInfrastructurePort(Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.operational_api.current_tempWstatus_Id, Isolette_Data_Model.TempWstatus_impl_Payload(value))
  }

  // setter for incoming data port
  def put_lower_alarm_temp(value: Isolette_Data_Model.Temp_impl): Unit = {
    Art.insertInInfrastructurePort(Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.operational_api.lower_alarm_temp_Id, Isolette_Data_Model.Temp_impl_Payload(value))
  }

  // setter for incoming data port
  def put_monitor_mode(value: Isolette_Data_Model.Monitor_Mode.Type): Unit = {
    Art.insertInInfrastructurePort(Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.operational_api.monitor_mode_Id, Isolette_Data_Model.Monitor_Mode_Payload(value))
  }

  // setter for incoming data port
  def put_upper_alarm_temp(value: Isolette_Data_Model.Temp_impl): Unit = {
    Art.insertInInfrastructurePort(Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.operational_api.upper_alarm_temp_Id, Isolette_Data_Model.Temp_impl_Payload(value))
  }

  def fetchContainer(): isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.id).get
      return postContainer_.asInstanceOf[isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.name}")
      halt(s"No post state recorded for ${Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.name}")
    }
  }

  def check_concrete_outputs(lastCmd: Isolette_Data_Model.On_Off.Type,
                             api_alarm_control: Isolette_Data_Model.On_Off.Type): Unit = {
    var failureReasons: ISZ[ST] = ISZ()

    val actual_lastCmd = get_lastCmd()
    if (lastCmd != actual_lastCmd) {
      failureReasons = failureReasons :+ st"'lastCmd' did not match expected.  Expected: $lastCmd, Actual: $actual_lastCmd"
    }
    val actual_alarm_control = get_api_alarm_control()
    if (api_alarm_control != actual_alarm_control) {
      failureReasons = failureReasons :+ st"'alarm_control' did not match expected.  Expected: $api_alarm_control, Actual: $actual_alarm_control"
    }

    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }

  // getter for state variable
  def get_lastCmd(): Isolette_Data_Model.On_Off.Type = {
    return Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm.lastCmd
  }

  def get_api_alarm_control(): Isolette_Data_Model.On_Off.Type = {
    return fetchContainer().api_alarm_control
  }
}