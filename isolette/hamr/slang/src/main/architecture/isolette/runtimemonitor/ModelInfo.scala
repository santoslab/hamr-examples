// #Sireum
package isolette.runtimemonitor

import org.sireum._
import isolette._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object ModelInfo {
  val Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_MI : Component =
    Component(
      name = "Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface",
      id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "upper_desired_tempWstatus",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface.upper_desired_tempWstatus.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "lower_desired_tempWstatus",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface.lower_desired_tempWstatus.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "current_tempWstatus",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface.current_tempWstatus.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "regulator_mode",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface.regulator_mode.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "upper_desired_temp",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface.upper_desired_temp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "lower_desired_temp",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface.lower_desired_temp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "displayed_temp",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface.displayed_temp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "regulator_status",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface.regulator_status.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "interface_failure",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface.interface_failure.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_MI : Component =
    Component(
      name = "Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source",
      id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_lastCmd",
          direction = StateDirection.In,
          slangType = "Isolette_Data_Model.On_Off.Type"),
        StateVariable(
          name = "lastCmd",
          direction = StateDirection.Out,
          slangType = "Isolette_Data_Model.On_Off.Type"),
        Port(
          name = "current_tempWstatus",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source.current_tempWstatus.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "lower_desired_temp",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source.lower_desired_temp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "upper_desired_temp",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source.upper_desired_temp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "regulator_mode",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source.regulator_mode.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "heat_control",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source.heat_control.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_MI : Component =
    Component(
      name = "Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode",
      id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_lastRegulatorMode",
          direction = StateDirection.In,
          slangType = "Isolette_Data_Model.Regulator_Mode.Type"),
        StateVariable(
          name = "lastRegulatorMode",
          direction = StateDirection.Out,
          slangType = "Isolette_Data_Model.Regulator_Mode.Type"),
        Port(
          name = "current_tempWstatus",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode.current_tempWstatus.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "interface_failure",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode.interface_failure.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "internal_failure",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode.internal_failure.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "regulator_mode",
          id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode.regulator_mode.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_MI : Component =
    Component(
      name = "Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface",
      id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_lastCmd",
          direction = StateDirection.In,
          slangType = "Isolette_Data_Model.On_Off.Type"),
        StateVariable(
          name = "lastCmd",
          direction = StateDirection.Out,
          slangType = "Isolette_Data_Model.On_Off.Type"),
        Port(
          name = "upper_alarm_tempWstatus",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface.upper_alarm_tempWstatus.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "lower_alarm_tempWstatus",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface.lower_alarm_tempWstatus.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "current_tempWstatus",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface.current_tempWstatus.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "monitor_mode",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface.monitor_mode.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "upper_alarm_temp",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface.upper_alarm_temp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "lower_alarm_temp",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface.lower_alarm_temp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "monitor_status",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface.monitor_status.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "interface_failure",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface.interface_failure.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_MI : Component =
    Component(
      name = "Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm",
      id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_lastCmd",
          direction = StateDirection.In,
          slangType = "Isolette_Data_Model.On_Off.Type"),
        StateVariable(
          name = "lastCmd",
          direction = StateDirection.Out,
          slangType = "Isolette_Data_Model.On_Off.Type"),
        Port(
          name = "current_tempWstatus",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.current_tempWstatus.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "lower_alarm_temp",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.lower_alarm_temp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "upper_alarm_temp",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.upper_alarm_temp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "monitor_mode",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.monitor_mode.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "alarm_control",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.alarm_control.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_MI : Component =
    Component(
      name = "Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode",
      id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        StateVariable(
          name = "In_lastMonitorMode",
          direction = StateDirection.In,
          slangType = "Isolette_Data_Model.Monitor_Mode.Type"),
        StateVariable(
          name = "lastMonitorMode",
          direction = StateDirection.Out,
          slangType = "Isolette_Data_Model.Monitor_Mode.Type"),
        Port(
          name = "current_tempWstatus",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode.current_tempWstatus.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "interface_failure",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode.interface_failure.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "internal_failure",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode.internal_failure.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "monitor_mode",
          id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode.monitor_mode.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val modelInfo: ModelInfo =
    ModelInfo(ISZ(
     Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_MI,
     Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_MI,
     Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_MI,
     Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_MI,
     Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_MI,
     Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_MI))
}

@datatype class ModelInfo(val components: ISZ[Component])

@datatype class Component(val name: String,
                          val id: Z,
                          val dispatchProtocol: iDispatchProtocol.Type,
                          val state: ISZ[StateElement])

@enum object iDispatchProtocol {
  "Sporadic"
  "Periodic"
}

@enum object StateDirection {
  "In"
  "Out"
}

@sig trait StateElement {
  def name: String

  def slangType: String

  def direction: StateDirection.Type
}

@enum object PortKind {
  "Data"
  "Event"
  "EventData"
}

@datatype class Port(val name: String,
                     val id: Z,
                     val kind: PortKind.Type,
                     val direction: StateDirection.Type,
                     val slangType: String) extends StateElement

@datatype class StateVariable(val name: String,
                              val direction: StateDirection.Type,
                              val slangType: String) extends StateElement
