// #Sireum

package isolette.Isolette

import org.sireum._
import art._
import isolette._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object operator_interface_thread_impl_operator_interface_oip_oit_EntryPoint_Companion {

  var last_api_lower_desired_tempWstatus: Option[Isolette_Data_Model.TempWstatus_impl] = None()

  /** get the value of outgoing data port lower_desired_tempWstatus.  If a 'fresh' value wasn't sent
    * during the last dispatch then return last_api_lower_desired_tempWstatus.get.
    * Note: this requires outgoing data ports to be initialized during the
    * initialization phase or prior to system testing.
    */
  def get_api_lower_desired_tempWstatus: Isolette_Data_Model.TempWstatus_impl = {
    Art.observeOutPortVariable(Arch.isolette_single_sensor_Instance_operator_interface_oip_oit.operational_api.lower_desired_tempWstatus_Id) match {
      case Some(Isolette_Data_Model.TempWstatus_impl_Payload(value)) =>
        last_api_lower_desired_tempWstatus = Some(value)
        return value
      case _ if last_api_lower_desired_tempWstatus.isEmpty =>
        assert(F, "No value found on outgoing data port lower_desired_tempWstatus.\n                  Note: values placed during the initialization phase will persist across dispatches")
        halt("No value found on outgoing data port lower_desired_tempWstatus.\n                  Note: values placed during the initialization phase will persist across dispatches")
      case _ => return last_api_lower_desired_tempWstatus.get
    }
  }
  var last_api_upper_desired_tempWstatus: Option[Isolette_Data_Model.TempWstatus_impl] = None()

  /** get the value of outgoing data port upper_desired_tempWstatus.  If a 'fresh' value wasn't sent
    * during the last dispatch then return last_api_upper_desired_tempWstatus.get.
    * Note: this requires outgoing data ports to be initialized during the
    * initialization phase or prior to system testing.
    */
  def get_api_upper_desired_tempWstatus: Isolette_Data_Model.TempWstatus_impl = {
    Art.observeOutPortVariable(Arch.isolette_single_sensor_Instance_operator_interface_oip_oit.operational_api.upper_desired_tempWstatus_Id) match {
      case Some(Isolette_Data_Model.TempWstatus_impl_Payload(value)) =>
        last_api_upper_desired_tempWstatus = Some(value)
        return value
      case _ if last_api_upper_desired_tempWstatus.isEmpty =>
        assert(F, "No value found on outgoing data port upper_desired_tempWstatus.\n                  Note: values placed during the initialization phase will persist across dispatches")
        halt("No value found on outgoing data port upper_desired_tempWstatus.\n                  Note: values placed during the initialization phase will persist across dispatches")
      case _ => return last_api_upper_desired_tempWstatus.get
    }
  }
  var last_api_lower_alarm_tempWstatus: Option[Isolette_Data_Model.TempWstatus_impl] = None()

  /** get the value of outgoing data port lower_alarm_tempWstatus.  If a 'fresh' value wasn't sent
    * during the last dispatch then return last_api_lower_alarm_tempWstatus.get.
    * Note: this requires outgoing data ports to be initialized during the
    * initialization phase or prior to system testing.
    */
  def get_api_lower_alarm_tempWstatus: Isolette_Data_Model.TempWstatus_impl = {
    Art.observeOutPortVariable(Arch.isolette_single_sensor_Instance_operator_interface_oip_oit.operational_api.lower_alarm_tempWstatus_Id) match {
      case Some(Isolette_Data_Model.TempWstatus_impl_Payload(value)) =>
        last_api_lower_alarm_tempWstatus = Some(value)
        return value
      case _ if last_api_lower_alarm_tempWstatus.isEmpty =>
        assert(F, "No value found on outgoing data port lower_alarm_tempWstatus.\n                  Note: values placed during the initialization phase will persist across dispatches")
        halt("No value found on outgoing data port lower_alarm_tempWstatus.\n                  Note: values placed during the initialization phase will persist across dispatches")
      case _ => return last_api_lower_alarm_tempWstatus.get
    }
  }
  var last_api_upper_alarm_tempWstatus: Option[Isolette_Data_Model.TempWstatus_impl] = None()

  /** get the value of outgoing data port upper_alarm_tempWstatus.  If a 'fresh' value wasn't sent
    * during the last dispatch then return last_api_upper_alarm_tempWstatus.get.
    * Note: this requires outgoing data ports to be initialized during the
    * initialization phase or prior to system testing.
    */
  def get_api_upper_alarm_tempWstatus: Isolette_Data_Model.TempWstatus_impl = {
    Art.observeOutPortVariable(Arch.isolette_single_sensor_Instance_operator_interface_oip_oit.operational_api.upper_alarm_tempWstatus_Id) match {
      case Some(Isolette_Data_Model.TempWstatus_impl_Payload(value)) =>
        last_api_upper_alarm_tempWstatus = Some(value)
        return value
      case _ if last_api_upper_alarm_tempWstatus.isEmpty =>
        assert(F, "No value found on outgoing data port upper_alarm_tempWstatus.\n                  Note: values placed during the initialization phase will persist across dispatches")
        halt("No value found on outgoing data port upper_alarm_tempWstatus.\n                  Note: values placed during the initialization phase will persist across dispatches")
      case _ => return last_api_upper_alarm_tempWstatus.get
    }
  }
  var preStateContainer_wL: Option[operator_interface_thread_impl_operator_interface_oip_oit_PreState_Container_PS] = None()

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      operator_interface_thread_impl_operator_interface_oip_oit_PostState_Container_PS(
        api_lower_alarm_tempWstatus = get_api_lower_alarm_tempWstatus,
        api_lower_desired_tempWstatus = get_api_lower_desired_tempWstatus,
        api_upper_alarm_tempWstatus = get_api_upper_alarm_tempWstatus,
        api_upper_desired_tempWstatus = get_api_upper_desired_tempWstatus)

    // the rest can now be performed via a different thread
    isolette.runtimemonitor.RuntimeMonitor.observeInitialisePostState(Arch.isolette_single_sensor_Instance_operator_interface_oip_oit.id, isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_operator_interface_oip_oit_postInit, postStateContainer_wL)
  }

  def pre_compute(): Unit = {
    // block the component while its pre-state values are retrieved
    preStateContainer_wL = Some(
      operator_interface_thread_impl_operator_interface_oip_oit_PreState_Container_PS(
        api_alarm_control = Art.observeInPortVariable(Arch.isolette_single_sensor_Instance_operator_interface_oip_oit.operational_api.alarm_control_Id).get.asInstanceOf[Isolette_Data_Model.On_Off_Payload].value, 
        api_display_temperature = Art.observeInPortVariable(Arch.isolette_single_sensor_Instance_operator_interface_oip_oit.operational_api.display_temperature_Id).get.asInstanceOf[Isolette_Data_Model.Temp_impl_Payload].value, 
        api_monitor_status = Art.observeInPortVariable(Arch.isolette_single_sensor_Instance_operator_interface_oip_oit.operational_api.monitor_status_Id).get.asInstanceOf[Isolette_Data_Model.Status_Payload].value, 
        api_regulator_status = Art.observeInPortVariable(Arch.isolette_single_sensor_Instance_operator_interface_oip_oit.operational_api.regulator_status_Id).get.asInstanceOf[Isolette_Data_Model.Status_Payload].value))

    // the rest can now be performed via a different thread
    isolette.runtimemonitor.RuntimeMonitor.observeComputePreState(Arch.isolette_single_sensor_Instance_operator_interface_oip_oit.id, isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_operator_interface_oip_oit_preCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]])
  }

  def post_compute(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      operator_interface_thread_impl_operator_interface_oip_oit_PostState_Container_PS(
        api_lower_alarm_tempWstatus = get_api_lower_alarm_tempWstatus,
        api_lower_desired_tempWstatus = get_api_lower_desired_tempWstatus,
        api_upper_alarm_tempWstatus = get_api_upper_alarm_tempWstatus,
        api_upper_desired_tempWstatus = get_api_upper_desired_tempWstatus)

    // the rest can now be performed via a different thread
    isolette.runtimemonitor.RuntimeMonitor.observeComputePrePostState(Arch.isolette_single_sensor_Instance_operator_interface_oip_oit.id, isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_operator_interface_oip_oit_postCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]], postStateContainer_wL)
  }
}