// #Sireum

package isolette.runtimemonitor

import org.sireum._
import isolette._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object GumboXDispatcher {
  def checkContract(observationKind: ObservationKind.Type, preContainer: Option[art.DataContent], postContainer: Option[art.DataContent]): B = {
    observationKind match {
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postInit =>
        val result: B = isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PostState_Container_PS])
        //println(s"manage_regulator_interface.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_preCompute =>
        val result: B = isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_GumboX.compute_CEP_Pre_Container(preContainer.get.asInstanceOf[isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PreState_Container_PS])
        //println(s"manage_regulator_interface.timeTriggered: Pre-condition: ${if (result) "" else "un"}satisfied")
        return result
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postCompute =>
        val result: B = isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PreState_Container_PS], postContainer.get.asInstanceOf[isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PostState_Container_PS])
        //println(s"manage_regulator_interface.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postInit =>
        val result: B = isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_PostState_Container_PS])
        //println(s"manage_heat_source.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_preCompute =>
        val result: B = isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_GumboX.compute_CEP_Pre_Container(preContainer.get.asInstanceOf[isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_PreState_Container_PS])
        //println(s"manage_heat_source.timeTriggered: Pre-condition: ${if (result) "" else "un"}satisfied")
        return result
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postCompute =>
        val result: B = isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_PreState_Container_PS], postContainer.get.asInstanceOf[isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_PostState_Container_PS])
        //println(s"manage_heat_source.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_postInit =>
        val result: B = isolette.Regulate.Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[isolette.Regulate.Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_PostState_Container_PS])
        //println(s"manage_regulator_mode.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_preCompute =>
        // checking the pre-state values of manage_regulator_mode's compute entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_postCompute =>
        val result: B = isolette.Regulate.Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[isolette.Regulate.Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_PreState_Container_PS], postContainer.get.asInstanceOf[isolette.Regulate.Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_PostState_Container_PS])
        //println(s"manage_regulator_mode.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_detect_regulator_failure_postInit =>
        // checking the post-state values of detect_regulator_failure's initialise entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_detect_regulator_failure_preCompute =>
        // checking the pre-state values of detect_regulator_failure's compute entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_detect_regulator_failure_postCompute =>
        // checking the post-state values of detect_regulator_failure's compute entrypoint is not required
        return T

      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_postInit =>
        val result: B = isolette.Monitor.Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[isolette.Monitor.Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_PostState_Container_PS])
        //println(s"manage_monitor_interface.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_preCompute =>
        // checking the pre-state values of manage_monitor_interface's compute entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_postCompute =>
        val result: B = isolette.Monitor.Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[isolette.Monitor.Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_PreState_Container_PS], postContainer.get.asInstanceOf[isolette.Monitor.Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_PostState_Container_PS])
        //println(s"manage_monitor_interface.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postInit =>
        val result: B = isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PostState_Container_PS])
        //println(s"manage_alarm.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_preCompute =>
        val result: B = isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_GumboX.compute_CEP_Pre_Container(preContainer.get.asInstanceOf[isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PreState_Container_PS])
        //println(s"manage_alarm.timeTriggered: Pre-condition: ${if (result) "" else "un"}satisfied")
        return result
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postCompute =>
        val result: B = isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PreState_Container_PS], postContainer.get.asInstanceOf[isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PostState_Container_PS])
        //println(s"manage_alarm.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_postInit =>
        val result: B = isolette.Monitor.Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[isolette.Monitor.Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_PostState_Container_PS])
        //println(s"manage_monitor_mode.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_preCompute =>
        // checking the pre-state values of manage_monitor_mode's compute entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_postCompute =>
        val result: B = isolette.Monitor.Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[isolette.Monitor.Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_PreState_Container_PS], postContainer.get.asInstanceOf[isolette.Monitor.Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_PostState_Container_PS])
        //println(s"manage_monitor_mode.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_detect_monitor_failure_postInit =>
        // checking the post-state values of detect_monitor_failure's initialise entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_detect_monitor_failure_preCompute =>
        // checking the pre-state values of detect_monitor_failure's compute entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_detect_monitor_failure_postCompute =>
        // checking the post-state values of detect_monitor_failure's compute entrypoint is not required
        return T

      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_operator_interface_oip_oit_postInit =>
        // checking the post-state values of oit's initialise entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_operator_interface_oip_oit_preCompute =>
        // checking the pre-state values of oit's compute entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_operator_interface_oip_oit_postCompute =>
        // checking the post-state values of oit's compute entrypoint is not required
        return T

      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_temperature_sensor_cpi_thermostat_postInit =>
        // checking the post-state values of thermostat's initialise entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_temperature_sensor_cpi_thermostat_preCompute =>
        // checking the pre-state values of thermostat's compute entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_temperature_sensor_cpi_thermostat_postCompute =>
        // checking the post-state values of thermostat's compute entrypoint is not required
        return T

      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_heat_source_cpi_heat_controller_postInit =>
        // checking the post-state values of heat_controller's initialise entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_heat_source_cpi_heat_controller_preCompute =>
        // checking the pre-state values of heat_controller's compute entrypoint is not required
        return T
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_heat_source_cpi_heat_controller_postCompute =>
        // checking the post-state values of heat_controller's compute entrypoint is not required
        return T

      case _ => halt("Infeasible")
    }
  }

  def genTestSuite(testCases: ISZ[(Z, ISZ[ST])]): Unit = {
    val tq = "\"\"\""

    val testRoot = Os.path(".") / "src" / "test" / "bridge"

    val Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface.id
    val Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source.id
    val Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode.id
    val Detect_Regulator_Failure_impl_thermostat_regulate_temperature_detect_regulator_failure_id = Arch.isolette_single_sensor_Instance_thermostat_regulate_temperature_detect_regulator_failure.id
    val Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface.id
    val Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm.id
    val Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode.id
    val Detect_Monitor_Failure_impl_thermostat_monitor_temperature_detect_monitor_failure_id = Arch.isolette_single_sensor_Instance_thermostat_monitor_temperature_detect_monitor_failure.id
    val Operator_interface_thread_impl_operator_interface_oip_oit_id = Arch.isolette_single_sensor_Instance_operator_interface_oip_oit.id
    val Temperature_Sensor_impl_temperature_sensor_cpi_thermostat_id = Arch.isolette_single_sensor_Instance_temperature_sensor_cpi_thermostat.id
    val Heat_Source_impl_heat_source_cpi_heat_controller_id = Arch.isolette_single_sensor_Instance_heat_source_cpi_heat_controller.id

    def genUniqueSuiteName(path: Os.Path, prefix: String): String = {
      var i = 0
      while(true) {
        val cand = path / s"${prefix}_${i}.scala"
        if (!cand.exists) {
          return s"${prefix}_${i}"
        }
        i = i + 1
      }
      halt("Infeasible")
    }

    for (p <- testCases) {
      art.Art.BridgeId.fromZ(p._1) match {
        case Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_id =>
          val prefix = "Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_RM_TestSuite"
          val path = testRoot /+ ISZ("isolette","Regulate")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package isolette.Regulate
                |
                |import org.sireum._
                |import isolette.Regulate._
                |
                |class ${suiteName} extends Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_id =>
          val prefix = "Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_RM_TestSuite"
          val path = testRoot /+ ISZ("isolette","Regulate")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package isolette.Regulate
                |
                |import org.sireum._
                |import isolette.Regulate._
                |
                |class ${suiteName} extends Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_id =>
          val prefix = "Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_RM_TestSuite"
          val path = testRoot /+ ISZ("isolette","Regulate")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package isolette.Regulate
                |
                |import org.sireum._
                |import isolette.Regulate._
                |
                |class ${suiteName} extends Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Detect_Regulator_Failure_impl_thermostat_regulate_temperature_detect_regulator_failure_id =>
          val prefix = "Detect_Regulator_Failure_impl_thermostat_regulate_temperature_detect_regulator_failure_RM_TestSuite"
          val path = testRoot /+ ISZ("isolette","Regulate")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package isolette.Regulate
                |
                |import org.sireum._
                |import isolette.Regulate._
                |
                |class ${suiteName} extends Detect_Regulator_Failure_impl_thermostat_regulate_temperature_detect_regulator_failure_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_id =>
          val prefix = "Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_RM_TestSuite"
          val path = testRoot /+ ISZ("isolette","Monitor")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package isolette.Monitor
                |
                |import org.sireum._
                |import isolette.Monitor._
                |
                |class ${suiteName} extends Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_id =>
          val prefix = "Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_RM_TestSuite"
          val path = testRoot /+ ISZ("isolette","Monitor")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package isolette.Monitor
                |
                |import org.sireum._
                |import isolette.Monitor._
                |
                |class ${suiteName} extends Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_id =>
          val prefix = "Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_RM_TestSuite"
          val path = testRoot /+ ISZ("isolette","Monitor")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package isolette.Monitor
                |
                |import org.sireum._
                |import isolette.Monitor._
                |
                |class ${suiteName} extends Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Detect_Monitor_Failure_impl_thermostat_monitor_temperature_detect_monitor_failure_id =>
          val prefix = "Detect_Monitor_Failure_impl_thermostat_monitor_temperature_detect_monitor_failure_RM_TestSuite"
          val path = testRoot /+ ISZ("isolette","Monitor")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package isolette.Monitor
                |
                |import org.sireum._
                |import isolette.Monitor._
                |
                |class ${suiteName} extends Detect_Monitor_Failure_impl_thermostat_monitor_temperature_detect_monitor_failure_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Operator_interface_thread_impl_operator_interface_oip_oit_id =>
          val prefix = "operator_interface_thread_impl_operator_interface_oip_oit_RM_TestSuite"
          val path = testRoot /+ ISZ("isolette","Isolette")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package isolette.Isolette
                |
                |import org.sireum._
                |import isolette.Isolette._
                |
                |class ${suiteName} extends operator_interface_thread_impl_operator_interface_oip_oit_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Temperature_Sensor_impl_temperature_sensor_cpi_thermostat_id =>
          val prefix = "Temperature_Sensor_impl_temperature_sensor_cpi_thermostat_RM_TestSuite"
          val path = testRoot /+ ISZ("isolette","Devices")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package isolette.Devices
                |
                |import org.sireum._
                |import isolette.Devices._
                |
                |class ${suiteName} extends Temperature_Sensor_impl_temperature_sensor_cpi_thermostat_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Heat_Source_impl_heat_source_cpi_heat_controller_id =>
          val prefix = "Heat_Source_impl_heat_source_cpi_heat_controller_RM_TestSuite"
          val path = testRoot /+ ISZ("isolette","Devices")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package isolette.Devices
                |
                |import org.sireum._
                |import isolette.Devices._
                |
                |class ${suiteName} extends Heat_Source_impl_heat_source_cpi_heat_controller_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case x => halt(s"Infeasible bridge id: $x")
      }
    }
  }

  def genTestCase(observationKind: ObservationKind.Type, preContainer: Option[String], postContainer: Option[String], testNameSuffix: Option[String]): ST = {
    val tq = "\"\"\""
    val suffix: String =
      if (testNameSuffix.nonEmpty) testNameSuffix.get
      else ""

    observationKind match {
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postInit =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postInit
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = isolette.JSON.toRegulateManage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PostState_Container_PS(postJson).left
                    |  assert(isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postInit""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_preCompute =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_preCompute
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_preCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = isolette.JSON.toRegulateManage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_preCompute""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postCompute =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postCompute
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = isolette.JSON.toRegulateManage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = isolette.JSON.toRegulateManage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PreState_Container_PS(preJson).left
                    |  val postContainer = isolette.JSON.toRegulateManage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PostState_Container_PS(postJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |    println("Post-State Values:")
                    |    println(s"  $$postContainer");
                    |  }
                    |  assert(isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postCompute""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postInit =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postInit
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = isolette.JSON.toRegulateManage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_PostState_Container_PS(postJson).left
                    |  assert(isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postInit""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_preCompute =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_preCompute
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_preCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = isolette.JSON.toRegulateManage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_preCompute""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postCompute =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postCompute
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = isolette.JSON.toRegulateManage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = isolette.JSON.toRegulateManage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_PreState_Container_PS(preJson).left
                    |  val postContainer = isolette.JSON.toRegulateManage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_PostState_Container_PS(postJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |    println("Post-State Values:")
                    |    println(s"  $$postContainer");
                    |  }
                    |  assert(isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postCompute""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_postInit =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_postInit
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = isolette.JSON.toRegulateManage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_PostState_Container_PS(postJson).left
                    |  assert(isolette.Regulate.Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_postInit""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_postCompute =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_postCompute
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = isolette.JSON.toRegulateManage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_PreState_Container_PS(preJson).left
                    |  val postContainer = isolette.JSON.toRegulateManage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_PostState_Container_PS(postJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |    println("Post-State Values:")
                    |    println(s"  $$postContainer");
                    |  }
                    |  assert(isolette.Regulate.Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_postCompute""")

      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_postInit =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_postInit
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = isolette.JSON.toMonitorManage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_PostState_Container_PS(postJson).left
                    |  assert(isolette.Monitor.Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_postInit""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_postCompute =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_postCompute
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = isolette.JSON.toMonitorManage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_PreState_Container_PS(preJson).left
                    |  val postContainer = isolette.JSON.toMonitorManage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_PostState_Container_PS(postJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |    println("Post-State Values:")
                    |    println(s"  $$postContainer");
                    |  }
                    |  assert(isolette.Monitor.Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_postCompute""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postInit =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postInit
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = isolette.JSON.toMonitorManage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PostState_Container_PS(postJson).left
                    |  assert(isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postInit""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_preCompute =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_preCompute
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_preCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = isolette.JSON.toMonitorManage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_preCompute""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postCompute =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postCompute
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = isolette.JSON.toMonitorManage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PreState_Container_PS(preJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |  }
                    |  assert(isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = isolette.JSON.toMonitorManage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PreState_Container_PS(preJson).left
                    |  val postContainer = isolette.JSON.toMonitorManage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PostState_Container_PS(postJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |    println("Post-State Values:")
                    |    println(s"  $$postContainer");
                    |  }
                    |  assert(isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postCompute""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_postInit =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_postInit
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = isolette.JSON.toMonitorManage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_PostState_Container_PS(postJson).left
                    |  assert(isolette.Monitor.Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_postInit""")
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_postCompute =>
        return (st"""// Begin test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_postCompute
                    |
                    |test(s"isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = isolette.JSON.toMonitorManage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_PreState_Container_PS(preJson).left
                    |  val postContainer = isolette.JSON.toMonitorManage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_PostState_Container_PS(postJson).left
                    |  if (verbose) {
                    |    println("Pre-State Values:")
                    |    println(s"  $$preContainer")
                    |    println("Post-State Values:")
                    |    println(s"  $$postContainer");
                    |  }
                    |  assert(isolette.Monitor.Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |// End test cases for isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_postCompute""")




      case _ => return st"// TODO ${observationKind}"
    }
  }

  def getUpdates(bridge_id: art.Art.BridgeId, observationKind: ObservationKind.Type, container: art.DataContent): Map[String, String] = {
    observationKind match {
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_upper_desired_temp" ~> postContainer.api_upper_desired_temp.string
        updates = updates + s"${bridge_id}_Out_lower_desired_temp" ~> postContainer.api_lower_desired_temp.string
        updates = updates + s"${bridge_id}_Out_displayed_temp" ~> postContainer.api_displayed_temp.string
        updates = updates + s"${bridge_id}_Out_regulator_status" ~> postContainer.api_regulator_status.string
        updates = updates + s"${bridge_id}_Out_interface_failure" ~> postContainer.api_interface_failure.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_lastCmd" ~> postContainer.lastCmd.string
        updates = updates + s"${bridge_id}_Out_heat_control" ~> postContainer.api_heat_control.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Regulate.Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_lastRegulatorMode" ~> postContainer.lastRegulatorMode.string
        updates = updates + s"${bridge_id}_Out_regulator_mode" ~> postContainer.api_regulator_mode.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_detect_regulator_failure_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Regulate.Detect_Regulator_Failure_impl_thermostat_regulate_temperature_detect_regulator_failure_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_internal_failure" ~> postContainer.api_internal_failure.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Monitor.Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_lastCmd" ~> postContainer.lastCmd.string
        updates = updates + s"${bridge_id}_Out_upper_alarm_temp" ~> postContainer.api_upper_alarm_temp.string
        updates = updates + s"${bridge_id}_Out_lower_alarm_temp" ~> postContainer.api_lower_alarm_temp.string
        updates = updates + s"${bridge_id}_Out_monitor_status" ~> postContainer.api_monitor_status.string
        updates = updates + s"${bridge_id}_Out_interface_failure" ~> postContainer.api_interface_failure.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_lastCmd" ~> postContainer.lastCmd.string
        updates = updates + s"${bridge_id}_Out_alarm_control" ~> postContainer.api_alarm_control.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Monitor.Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_lastMonitorMode" ~> postContainer.lastMonitorMode.string
        updates = updates + s"${bridge_id}_Out_monitor_mode" ~> postContainer.api_monitor_mode.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_detect_monitor_failure_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Monitor.Detect_Monitor_Failure_impl_thermostat_monitor_temperature_detect_monitor_failure_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_internal_failure" ~> postContainer.api_internal_failure.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_operator_interface_oip_oit_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Isolette.operator_interface_thread_impl_operator_interface_oip_oit_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_lower_desired_tempWstatus" ~> postContainer.api_lower_desired_tempWstatus.string
        updates = updates + s"${bridge_id}_Out_upper_desired_tempWstatus" ~> postContainer.api_upper_desired_tempWstatus.string
        updates = updates + s"${bridge_id}_Out_lower_alarm_tempWstatus" ~> postContainer.api_lower_alarm_tempWstatus.string
        updates = updates + s"${bridge_id}_Out_upper_alarm_tempWstatus" ~> postContainer.api_upper_alarm_tempWstatus.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_temperature_sensor_cpi_thermostat_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Devices.Temperature_Sensor_impl_temperature_sensor_cpi_thermostat_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_current_tempWstatus" ~> postContainer.api_current_tempWstatus.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_heat_source_cpi_heat_controller_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Devices.Heat_Source_impl_heat_source_cpi_heat_controller_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_heat_out" ~> postContainer.api_heat_out.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PreState_Container_PS]
        updates = updates + s"${bridge_id}_In_upper_desired_tempWstatus" ~> preContainer.api_upper_desired_tempWstatus.string
        updates = updates + s"${bridge_id}_In_lower_desired_tempWstatus" ~> preContainer.api_lower_desired_tempWstatus.string
        updates = updates + s"${bridge_id}_In_current_tempWstatus" ~> preContainer.api_current_tempWstatus.string
        updates = updates + s"${bridge_id}_In_regulator_mode" ~> preContainer.api_regulator_mode.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_PreState_Container_PS]
        updates = updates + s"${bridge_id}_In_In_lastCmd" ~> preContainer.In_lastCmd.string
        updates = updates + s"${bridge_id}_In_current_tempWstatus" ~> preContainer.api_current_tempWstatus.string
        updates = updates + s"${bridge_id}_In_lower_desired_temp" ~> preContainer.api_lower_desired_temp.string
        updates = updates + s"${bridge_id}_In_upper_desired_temp" ~> preContainer.api_upper_desired_temp.string
        updates = updates + s"${bridge_id}_In_regulator_mode" ~> preContainer.api_regulator_mode.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[isolette.Regulate.Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_PreState_Container_PS]
        updates = updates + s"${bridge_id}_In_In_lastRegulatorMode" ~> preContainer.In_lastRegulatorMode.string
        updates = updates + s"${bridge_id}_In_current_tempWstatus" ~> preContainer.api_current_tempWstatus.string
        updates = updates + s"${bridge_id}_In_interface_failure" ~> preContainer.api_interface_failure.string
        updates = updates + s"${bridge_id}_In_internal_failure" ~> preContainer.api_internal_failure.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_detect_regulator_failure_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[isolette.Regulate.Detect_Regulator_Failure_impl_thermostat_regulate_temperature_detect_regulator_failure_PreState_Container_PS]
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[isolette.Monitor.Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_PreState_Container_PS]
        updates = updates + s"${bridge_id}_In_In_lastCmd" ~> preContainer.In_lastCmd.string
        updates = updates + s"${bridge_id}_In_upper_alarm_tempWstatus" ~> preContainer.api_upper_alarm_tempWstatus.string
        updates = updates + s"${bridge_id}_In_lower_alarm_tempWstatus" ~> preContainer.api_lower_alarm_tempWstatus.string
        updates = updates + s"${bridge_id}_In_current_tempWstatus" ~> preContainer.api_current_tempWstatus.string
        updates = updates + s"${bridge_id}_In_monitor_mode" ~> preContainer.api_monitor_mode.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PreState_Container_PS]
        updates = updates + s"${bridge_id}_In_In_lastCmd" ~> preContainer.In_lastCmd.string
        updates = updates + s"${bridge_id}_In_current_tempWstatus" ~> preContainer.api_current_tempWstatus.string
        updates = updates + s"${bridge_id}_In_lower_alarm_temp" ~> preContainer.api_lower_alarm_temp.string
        updates = updates + s"${bridge_id}_In_upper_alarm_temp" ~> preContainer.api_upper_alarm_temp.string
        updates = updates + s"${bridge_id}_In_monitor_mode" ~> preContainer.api_monitor_mode.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[isolette.Monitor.Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_PreState_Container_PS]
        updates = updates + s"${bridge_id}_In_In_lastMonitorMode" ~> preContainer.In_lastMonitorMode.string
        updates = updates + s"${bridge_id}_In_current_tempWstatus" ~> preContainer.api_current_tempWstatus.string
        updates = updates + s"${bridge_id}_In_interface_failure" ~> preContainer.api_interface_failure.string
        updates = updates + s"${bridge_id}_In_internal_failure" ~> preContainer.api_internal_failure.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_detect_monitor_failure_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[isolette.Monitor.Detect_Monitor_Failure_impl_thermostat_monitor_temperature_detect_monitor_failure_PreState_Container_PS]
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_operator_interface_oip_oit_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[isolette.Isolette.operator_interface_thread_impl_operator_interface_oip_oit_PreState_Container_PS]
        updates = updates + s"${bridge_id}_In_regulator_status" ~> preContainer.api_regulator_status.string
        updates = updates + s"${bridge_id}_In_monitor_status" ~> preContainer.api_monitor_status.string
        updates = updates + s"${bridge_id}_In_display_temperature" ~> preContainer.api_display_temperature.string
        updates = updates + s"${bridge_id}_In_alarm_control" ~> preContainer.api_alarm_control.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_temperature_sensor_cpi_thermostat_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[isolette.Devices.Temperature_Sensor_impl_temperature_sensor_cpi_thermostat_PreState_Container_PS]
        updates = updates + s"${bridge_id}_In_air" ~> preContainer.api_air.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_heat_source_cpi_heat_controller_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[isolette.Devices.Heat_Source_impl_heat_source_cpi_heat_controller_PreState_Container_PS]
        updates = updates + s"${bridge_id}_In_heat_control" ~> preContainer.api_heat_control.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_interface_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Regulate.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_upper_desired_temp" ~> postContainer.api_upper_desired_temp.string
        updates = updates + s"${bridge_id}_Out_lower_desired_temp" ~> postContainer.api_lower_desired_temp.string
        updates = updates + s"${bridge_id}_Out_displayed_temp" ~> postContainer.api_displayed_temp.string
        updates = updates + s"${bridge_id}_Out_regulator_status" ~> postContainer.api_regulator_status.string
        updates = updates + s"${bridge_id}_Out_interface_failure" ~> postContainer.api_interface_failure.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_heat_source_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Regulate.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_lastCmd" ~> postContainer.lastCmd.string
        updates = updates + s"${bridge_id}_Out_heat_control" ~> postContainer.api_heat_control.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_manage_regulator_mode_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Regulate.Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_lastRegulatorMode" ~> postContainer.lastRegulatorMode.string
        updates = updates + s"${bridge_id}_Out_regulator_mode" ~> postContainer.api_regulator_mode.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_regulate_temperature_detect_regulator_failure_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Regulate.Detect_Regulator_Failure_impl_thermostat_regulate_temperature_detect_regulator_failure_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_internal_failure" ~> postContainer.api_internal_failure.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_interface_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Monitor.Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_lastCmd" ~> postContainer.lastCmd.string
        updates = updates + s"${bridge_id}_Out_upper_alarm_temp" ~> postContainer.api_upper_alarm_temp.string
        updates = updates + s"${bridge_id}_Out_lower_alarm_temp" ~> postContainer.api_lower_alarm_temp.string
        updates = updates + s"${bridge_id}_Out_monitor_status" ~> postContainer.api_monitor_status.string
        updates = updates + s"${bridge_id}_Out_interface_failure" ~> postContainer.api_interface_failure.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_alarm_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Monitor.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_lastCmd" ~> postContainer.lastCmd.string
        updates = updates + s"${bridge_id}_Out_alarm_control" ~> postContainer.api_alarm_control.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_manage_monitor_mode_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Monitor.Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_lastMonitorMode" ~> postContainer.lastMonitorMode.string
        updates = updates + s"${bridge_id}_Out_monitor_mode" ~> postContainer.api_monitor_mode.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_thermostat_monitor_temperature_detect_monitor_failure_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Monitor.Detect_Monitor_Failure_impl_thermostat_monitor_temperature_detect_monitor_failure_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_internal_failure" ~> postContainer.api_internal_failure.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_operator_interface_oip_oit_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Isolette.operator_interface_thread_impl_operator_interface_oip_oit_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_lower_desired_tempWstatus" ~> postContainer.api_lower_desired_tempWstatus.string
        updates = updates + s"${bridge_id}_Out_upper_desired_tempWstatus" ~> postContainer.api_upper_desired_tempWstatus.string
        updates = updates + s"${bridge_id}_Out_lower_alarm_tempWstatus" ~> postContainer.api_lower_alarm_tempWstatus.string
        updates = updates + s"${bridge_id}_Out_upper_alarm_tempWstatus" ~> postContainer.api_upper_alarm_tempWstatus.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_temperature_sensor_cpi_thermostat_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Devices.Temperature_Sensor_impl_temperature_sensor_cpi_thermostat_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_current_tempWstatus" ~> postContainer.api_current_tempWstatus.string
        return updates
      case isolette.runtimemonitor.ObservationKind.isolette_single_sensor_Instance_heat_source_cpi_heat_controller_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[isolette.Devices.Heat_Source_impl_heat_source_cpi_heat_controller_PostState_Container_PS]
        updates = updates + s"${bridge_id}_Out_heat_out" ~> postContainer.api_heat_out.string
        return updates
      case _ => return Map.empty
    }
  }
}