// #Sireum

package isolette.Regulate

import org.sireum._
import isolette._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// containers for the pre and post state values of ports and state variables

@sig trait Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PreState_Container extends art.DataContent {
  def api_current_tempWstatus: Isolette_Data_Model.TempWstatus_impl
  def api_lower_desired_tempWstatus: Isolette_Data_Model.TempWstatus_impl
  def api_regulator_mode: Isolette_Data_Model.Regulator_Mode.Type
  def api_upper_desired_tempWstatus: Isolette_Data_Model.TempWstatus_impl
}

// container for incoming ports
@datatype class Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PreState_Container_P (
  val api_current_tempWstatus: Isolette_Data_Model.TempWstatus_impl,
  val api_lower_desired_tempWstatus: Isolette_Data_Model.TempWstatus_impl,
  val api_regulator_mode: Isolette_Data_Model.Regulator_Mode.Type,
  val api_upper_desired_tempWstatus: Isolette_Data_Model.TempWstatus_impl) extends Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PreState_Container

// container for incoming ports and state variables
@datatype class Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PreState_Container_PS (
  val api_current_tempWstatus: Isolette_Data_Model.TempWstatus_impl,
  val api_lower_desired_tempWstatus: Isolette_Data_Model.TempWstatus_impl,
  val api_regulator_mode: Isolette_Data_Model.Regulator_Mode.Type,
  val api_upper_desired_tempWstatus: Isolette_Data_Model.TempWstatus_impl) extends Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PreState_Container

@sig trait Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PostState_Container extends art.DataContent {
  def api_displayed_temp: Isolette_Data_Model.Temp_impl
  def api_interface_failure: Isolette_Data_Model.Failure_Flag_impl
  def api_lower_desired_temp: Isolette_Data_Model.Temp_impl
  def api_regulator_status: Isolette_Data_Model.Status.Type
  def api_upper_desired_temp: Isolette_Data_Model.Temp_impl
}

// container for outgoing ports
@datatype class Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PostState_Container_P (
  val api_displayed_temp: Isolette_Data_Model.Temp_impl,
  val api_interface_failure: Isolette_Data_Model.Failure_Flag_impl,
  val api_lower_desired_temp: Isolette_Data_Model.Temp_impl,
  val api_regulator_status: Isolette_Data_Model.Status.Type,
  val api_upper_desired_temp: Isolette_Data_Model.Temp_impl) extends Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PostState_Container

// container for outgoing ports and state variables
@datatype class Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PostState_Container_PS (
  val api_displayed_temp: Isolette_Data_Model.Temp_impl,
  val api_interface_failure: Isolette_Data_Model.Failure_Flag_impl,
  val api_lower_desired_temp: Isolette_Data_Model.Temp_impl,
  val api_regulator_status: Isolette_Data_Model.Status.Type,
  val api_upper_desired_temp: Isolette_Data_Model.Temp_impl) extends Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_PostState_Container
