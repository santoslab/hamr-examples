// #Sireum

package isolette

import org.sireum._
import art._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object LegacyDemo extends App {
  def main(args: ISZ[String]): Z = {

    val seed: Z = if (args.size == z"1") {
      val n = Z(args(0)).get
      if (n <= z"0") 1 else n
    } else {
      1
    }

    PlatformComm.initialise(seed, None())

    val empty = art.Empty()

    PlatformComm.sendAsync(IPCPorts.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_App, IPCPorts.Manage_Regulator_Interface_impl_thermostat_regulate_temperature_manage_regulator_interface_App, empty)
    PlatformComm.sendAsync(IPCPorts.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_App, IPCPorts.Manage_Heat_Source_impl_thermostat_regulate_temperature_manage_heat_source_App, empty)
    PlatformComm.sendAsync(IPCPorts.Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_App, IPCPorts.Manage_Regulator_Mode_impl_thermostat_regulate_temperature_manage_regulator_mode_App, empty)
    PlatformComm.sendAsync(IPCPorts.Detect_Regulator_Failure_impl_thermostat_regulate_temperature_detect_regulator_failure_App, IPCPorts.Detect_Regulator_Failure_impl_thermostat_regulate_temperature_detect_regulator_failure_App, empty)
    PlatformComm.sendAsync(IPCPorts.Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_App, IPCPorts.Manage_Monitor_Interface_impl_thermostat_monitor_temperature_manage_monitor_interface_App, empty)
    PlatformComm.sendAsync(IPCPorts.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_App, IPCPorts.Manage_Alarm_impl_thermostat_monitor_temperature_manage_alarm_App, empty)
    PlatformComm.sendAsync(IPCPorts.Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_App, IPCPorts.Manage_Monitor_Mode_impl_thermostat_monitor_temperature_manage_monitor_mode_App, empty)
    PlatformComm.sendAsync(IPCPorts.Detect_Monitor_Failure_impl_thermostat_monitor_temperature_detect_monitor_failure_App, IPCPorts.Detect_Monitor_Failure_impl_thermostat_monitor_temperature_detect_monitor_failure_App, empty)
    PlatformComm.sendAsync(IPCPorts.operator_interface_thread_impl_operator_interface_oip_oit_App, IPCPorts.operator_interface_thread_impl_operator_interface_oip_oit_App, empty)
    PlatformComm.sendAsync(IPCPorts.Temperature_Sensor_impl_temperature_sensor_cpi_thermostat_App, IPCPorts.Temperature_Sensor_impl_temperature_sensor_cpi_thermostat_App, empty)
    PlatformComm.sendAsync(IPCPorts.Heat_Source_impl_heat_source_cpi_heat_controller_App, IPCPorts.Heat_Source_impl_heat_source_cpi_heat_controller_App, empty)

    PlatformComm.finalise()
    return 0
  }
}
