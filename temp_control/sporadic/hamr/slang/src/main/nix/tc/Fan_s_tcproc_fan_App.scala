// #Sireum

package tc

import org.sireum._
import art._
import art.Art.PortId._
import art.scheduling.nop.NopScheduler

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Fan_s_tcproc_fan_App extends App {

  val entryPoints: Bridge.EntryPoints = Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.entryPoints
  val appPortId: Art.PortId = IPCPorts.Fan_s_tcproc_fan_App
  val appPortIdOpt: Option[Art.PortId] = Some(appPortId)

  // incoming ports
  val fanCmdPortId: Art.PortId = Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.fanCmd.id
  val fanCmdPortIdOpt: Option[Art.PortId] = Some(fanCmdPortId)

  def initialiseArchitecture(seed: Z): Unit = {
    PlatformComm.initialise(seed, appPortIdOpt)
    PlatformComm.initialise(seed, fanCmdPortIdOpt)

    Art.run(Arch.ad, NopScheduler())
  }

  def initialise(): Unit = {
    entryPoints.initialise()
  }

  def compute(): Unit = {
    var dispatch = F

    {
      val out = IPCPorts.emptyReceiveAsyncOut
      PlatformComm.receiveAsync(fanCmdPortIdOpt, out)
      out.value2 match {
        case Some(v: CoolingFan.FanCmd_Payload) => ArtNix.updateData(fanCmdPortId, v); dispatch = T
        case Some(v) => halt(s"Unexpected payload on port fanCmd.  Expecting something of type CoolingFan.FanCmd_Payload but received ${v}")
        case None() => // do nothing
      }
    }
    if (dispatch) {
      entryPoints.compute()
      tc.Process.sleep(1000)
    } else {
      tc.Process.sleep(10)
    }
  }

  def finalise(): Unit = {
    entryPoints.finalise()
  }

  def main(args: ISZ[String]): Z = {

    val seed: Z = if (args.size == z"1") {
      val n = Z(args(0)).get
      if (n == z"0") 1 else n
    } else {
      1
    }

    initialiseArchitecture(seed)

    PlatformComm.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) // pause after setting up component

    initialise()

    PlatformComm.receive(appPortIdOpt, IPCPorts.emptyReceiveOut) // pause after component init

    println("Fan_s_tcproc_fan_App starting ...")

    ArtNix.eventDispatch()

    var terminated = F
    while (!terminated) {
      val out = IPCPorts.emptyReceiveAsyncOut
      PlatformComm.receiveAsync(appPortIdOpt, out)
      if (out.value2.isEmpty) {
        compute()
      } else {
        terminated = T
      }
    }
    exit()

    touch()

    return 0
  }

  def touch(): Unit = {
    if(F) {
      TranspilerToucher.touch()

      // add types used in Platform.receive and Platform.receiveAsync
      val mbox2Boolean_Payload: MBox2[Art.PortId, DataContent] = MBox2(portId"0", Base_Types.Boolean_Payload(T))
      val mbox2OptionDataContent: MBox2[Art.PortId, Option[DataContent]] = MBox2(portId"0", None())

      // touch each payload/type in case some are only used as a field in a record
      def printDataContent(a: art.DataContent): Unit = { println(s"${a}") }

      printDataContent(Base_Types.Float_32_Payload(Base_Types.Float_32_example()))
      printDataContent(Base_Types.Boolean_Payload(Base_Types.Boolean_example()))
      printDataContent(Base_Types.Integer_Payload(Base_Types.Integer_example()))
      printDataContent(Base_Types.Integer_8_Payload(Base_Types.Integer_8_example()))
      printDataContent(Base_Types.Integer_16_Payload(Base_Types.Integer_16_example()))
      printDataContent(Base_Types.Integer_32_Payload(Base_Types.Integer_32_example()))
      printDataContent(Base_Types.Integer_64_Payload(Base_Types.Integer_64_example()))
      printDataContent(Base_Types.Unsigned_8_Payload(Base_Types.Unsigned_8_example()))
      printDataContent(Base_Types.Unsigned_16_Payload(Base_Types.Unsigned_16_example()))
      printDataContent(Base_Types.Unsigned_32_Payload(Base_Types.Unsigned_32_example()))
      printDataContent(Base_Types.Unsigned_64_Payload(Base_Types.Unsigned_64_example()))
      printDataContent(Base_Types.Float_Payload(Base_Types.Float_example()))
      printDataContent(Base_Types.Float_64_Payload(Base_Types.Float_64_example()))
      printDataContent(Base_Types.Character_Payload(Base_Types.Character_example()))
      printDataContent(Base_Types.String_Payload(Base_Types.String_example()))
      printDataContent(TempSensor.Temperature_i_Payload(TempSensor.Temperature_i.example()))
      printDataContent(CoolingFan.FanCmd_Payload(CoolingFan.FanCmd.byOrdinal(0).get))
      printDataContent(CoolingFan.FanAck_Payload(CoolingFan.FanAck.byOrdinal(0).get))
      printDataContent(TempControlSoftwareSystem.SetPoint_i_Payload(TempControlSoftwareSystem.SetPoint_i.example()))
      printDataContent(art.Empty())

      tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_initialization_api.get.logInfo("")
      tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_initialization_api.get.logDebug("")
      tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_initialization_api.get.logError("")
      tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_operational_api.get.logInfo("")
      tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_operational_api.get.logDebug("")
      tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_operational_api.get.logError("")
      val apiUsage_fanCmd: Option[CoolingFan.FanCmd.Type] = tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_operational_api.get.get_fanCmd()
      tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_initialization_api.get.put_fanAck(CoolingFan.FanAck.byOrdinal(0).get)
      tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_operational_api.get.put_fanAck(CoolingFan.FanAck.byOrdinal(0).get)
    }
  }

  def exit(): Unit = {
    finalise()
    PlatformComm.finalise()
  }

  override def atExit(): Unit = {
    exit()
  }
}