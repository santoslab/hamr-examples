// #Sireum

package tc.TempSensor

import org.sireum._
import art._
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object TempSensor_s_tcproc_tempSensor_EntryPoint_Companion {

  var last_api_currentTemp: Option[TempSensor.Temperature_i] = None()
  def get_api_currentTemp: TempSensor.Temperature_i = {
    Art.observeOutPortVariable(Arch.TempControlSoftwareSystem_s_Instance_tcproc_tempSensor.operational_api.currentTemp_Id) match {
      case Some(TempSensor.Temperature_i_Payload(value)) =>
        last_api_currentTemp = Some(value)
        return value
      case _ => return last_api_currentTemp.get
    }
  }
  var preStateContainer_wL: Option[TempSensor_s_tcproc_tempSensor_PreState_wLContainer] = None()

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      TempSensor_s_tcproc_tempSensor_PostState_wLContainer(
        api_tempChanged = Art.observeOutPortVariable(Arch.TempControlSoftwareSystem_s_Instance_tcproc_tempSensor.operational_api.tempChanged_Id).asInstanceOf[Option[art.Empty]],
        api_currentTemp = get_api_currentTemp)

    tc.runtimemonitor.RuntimeMonitor.update1(Arch.TempControlSoftwareSystem_s_Instance_tcproc_tempSensor.id, tc.runtimemonitor.CaptureKind.tempSensor_postInit, postStateContainer_wL)

    // the rest of this could be done in a separate thread

    //val json = JSON.fromTempSensorTempSensor_s_tcproc_tempSensor_PostState_wLContainer(postStateContainer_wL, T)
    //println(s"tempSensor.initialise: Post-State values: $json")

    /*
    val result: B = tc.TempSensor.TempSensor_s_tcproc_tempSensor_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[tc.TempSensor.TempSensor_s_tcproc_tempSensor_PostState_wLContainer])
    println(s"tempSensor.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
    return result
    */
  }

  def pre_compute(): Unit = {
    // block the component while its pre-state values are retrieved
    preStateContainer_wL = Some(
      TempSensor_s_tcproc_tempSensor_PreState_wLContainer())

    tc.runtimemonitor.RuntimeMonitor.update1(Arch.TempControlSoftwareSystem_s_Instance_tcproc_tempSensor.id, tc.runtimemonitor.CaptureKind.tempSensor_preCompute, preStateContainer_wL.get)

    // the rest of this could be done in a separate thread
    /*
    val json = JSON.fromTempSensorTempSensor_s_tcproc_tempSensor_PreState_wLContainer(preStateContainer_wL.get, T)
    println(s"tempSensor.timeTriggered: Pre-State values: $json")

    // checking the pre-state values of tempSensor's compute entrypoint is not required
    return T
    */
  }

  def post_compute(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      TempSensor_s_tcproc_tempSensor_PostState_wLContainer(
        api_tempChanged = Art.observeOutPortVariable(Arch.TempControlSoftwareSystem_s_Instance_tcproc_tempSensor.operational_api.tempChanged_Id).asInstanceOf[Option[art.Empty]],
        api_currentTemp = get_api_currentTemp)

    tc.runtimemonitor.RuntimeMonitor.update2(Arch.TempControlSoftwareSystem_s_Instance_tcproc_tempSensor.id, tc.runtimemonitor.CaptureKind.tempSensor_postCompute, preStateContainer_wL.get, postStateContainer_wL)

    /*
    // the rest of this could be done in a separate thread

    val json = JSON.fromTempSensorTempSensor_s_tcproc_tempSensor_PostState_wLContainer(postStateContainer_wL, T)
    println(s"tempSensor.timeTriggered: Post-State values: $json")

    val result: B = tc.TempSensor.TempSensor_s_tcproc_tempSensor_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[tc.TempSensor.TempSensor_s_tcproc_tempSensor_PreState_wLContainer], postContainer.get.asInstanceOf[tc.TempSensor.TempSensor_s_tcproc_tempSensor_PostState_wLContainer])
    println(s"tempSensor.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
    return result
    */
  }
}