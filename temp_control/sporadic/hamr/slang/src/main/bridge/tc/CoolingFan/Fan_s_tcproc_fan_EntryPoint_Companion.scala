// #Sireum

package tc.CoolingFan

import org.sireum._
import art._
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Fan_s_tcproc_fan_EntryPoint_Companion {

  var preStateContainer_wL: Option[Fan_s_tcproc_fan_PreState_wLContainer] = None()

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      Fan_s_tcproc_fan_PostState_wLContainer(
        api_fanAck = // tipe indicates the following is not in slang :(
        //Art.observeOutPortVariable(Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.operational_api.fanAck_Id) match {
        //  case Some(CoolingFan.FanAck_Payload(value)) => Some(value)
        //  case _ => None()
        //}
        // so instead ...
        if (Art.observeOutPortVariable(Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.operational_api.fanAck_Id).nonEmpty)
          Some(Art.observeOutPortVariable(Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.operational_api.fanAck_Id).get.asInstanceOf[CoolingFan.FanAck_Payload].value)
        else None())

    tc.runtimemonitor.RuntimeMonitor.update1(Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.id, tc.runtimemonitor.CaptureKind.fan_postInit, postStateContainer_wL)

    // the rest of this could be done in a separate thread

    //val json = JSON.fromCoolingFanFan_s_tcproc_fan_PostState_wLContainer(postStateContainer_wL, T)
    //println(s"fan.initialise: Post-State values: $json")

    /*
    // checking the post-state values of fan's initialise entrypoint is not required
    return T
    */
  }

  def pre_compute(): Unit = {
    // block the component while its pre-state values are retrieved
    preStateContainer_wL = Some(
      Fan_s_tcproc_fan_PreState_wLContainer(
        api_fanCmd = // tipe indicates the following is not in slang :(
        //Art.observeInPortValue(Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.operational_api.fanCmd_Id) match {
        //  case Some(CoolingFan.FanCmd_Payload(value)) => Some(value)
        //  case _ => None()
        //}
        // so instead ..
        if (Art.observeInPortValue(Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.operational_api.fanCmd_Id).nonEmpty)
          Some(Art.observeInPortValue(Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.operational_api.fanCmd_Id).get.asInstanceOf[CoolingFan.FanCmd_Payload].value)
        else None()))

    tc.runtimemonitor.RuntimeMonitor.update1(Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.id, tc.runtimemonitor.CaptureKind.fan_preCompute, preStateContainer_wL.get)

    // the rest of this could be done in a separate thread
    /*
    val json = JSON.fromCoolingFanFan_s_tcproc_fan_PreState_wLContainer(preStateContainer_wL.get, T)
    println(s"fan.timeTriggered: Pre-State values: $json")

    // checking the pre-state values of fan's compute entrypoint is not required
    return T
    */
  }

  def post_compute(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      Fan_s_tcproc_fan_PostState_wLContainer(
        api_fanAck = // tipe indicates the following is not in slang :(
        //Art.observeOutPortVariable(Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.operational_api.fanAck_Id) match {
        //  case Some(CoolingFan.FanAck_Payload(value)) => Some(value)
        //  case _ => None()
        //}
        // so instead ...
        if (Art.observeOutPortVariable(Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.operational_api.fanAck_Id).nonEmpty)
          Some(Art.observeOutPortVariable(Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.operational_api.fanAck_Id).get.asInstanceOf[CoolingFan.FanAck_Payload].value)
        else None())

    tc.runtimemonitor.RuntimeMonitor.update2(Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.id, tc.runtimemonitor.CaptureKind.fan_postCompute, preStateContainer_wL.get, postStateContainer_wL)

    /*
    // the rest of this could be done in a separate thread

    val json = JSON.fromCoolingFanFan_s_tcproc_fan_PostState_wLContainer(postStateContainer_wL, T)
    println(s"fan.timeTriggered: Post-State values: $json")

    // checking the post-state values of fan's compute entrypoint is not required
    return T
    */
  }
}