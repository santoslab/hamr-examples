// #Sireum

package tc

import org.sireum._
import art._
import art.PortMode._
import art.DispatchPropertyProtocol._
import art.Art.BridgeId._
import art.Art.PortId._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Arch {
  val TempControlSoftwareSystem_s_Instance_tcproc_tempSensor : tc.TempSensor.TempSensor_s_tcproc_tempSensor_Bridge = {
    val currentTemp = Port[TempSensor.Temperature_i] (id = portId"0", name = "TempControlSoftwareSystem_s_Instance_tcproc_tempSensor_currentTemp", mode = DataOut)
    val tempChanged = Port[art.Empty] (id = portId"1", name = "TempControlSoftwareSystem_s_Instance_tcproc_tempSensor_tempChanged", mode = EventOut)

    tc.TempSensor.TempSensor_s_tcproc_tempSensor_Bridge(
      id = bridgeId"0",
      name = "TempControlSoftwareSystem_s_Instance_tcproc_tempSensor",
      dispatchProtocol = Periodic(period = 1000),
      dispatchTriggers = None(),

      currentTemp = currentTemp,
      tempChanged = tempChanged
    )
  }
  val TempControlSoftwareSystem_s_Instance_tcproc_fan : tc.CoolingFan.Fan_s_tcproc_fan_Bridge = {
    val fanCmd = Port[CoolingFan.FanCmd.Type] (id = portId"2", name = "TempControlSoftwareSystem_s_Instance_tcproc_fan_fanCmd", mode = EventIn)
    val fanAck = Port[CoolingFan.FanAck.Type] (id = portId"3", name = "TempControlSoftwareSystem_s_Instance_tcproc_fan_fanAck", mode = EventOut)

    tc.CoolingFan.Fan_s_tcproc_fan_Bridge(
      id = bridgeId"1",
      name = "TempControlSoftwareSystem_s_Instance_tcproc_fan",
      dispatchProtocol = Sporadic(min = 1000),
      dispatchTriggers = None(),

      fanCmd = fanCmd,
      fanAck = fanAck
    )
  }
  val TempControlSoftwareSystem_s_Instance_tcproc_tempControl : tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge = {
    val currentTemp = Port[TempSensor.Temperature_i] (id = portId"4", name = "TempControlSoftwareSystem_s_Instance_tcproc_tempControl_currentTemp", mode = DataIn)
    val fanAck = Port[CoolingFan.FanAck.Type] (id = portId"5", name = "TempControlSoftwareSystem_s_Instance_tcproc_tempControl_fanAck", mode = EventIn)
    val setPoint = Port[TempControlSoftwareSystem.SetPoint_i] (id = portId"6", name = "TempControlSoftwareSystem_s_Instance_tcproc_tempControl_setPoint", mode = EventIn)
    val fanCmd = Port[CoolingFan.FanCmd.Type] (id = portId"7", name = "TempControlSoftwareSystem_s_Instance_tcproc_tempControl_fanCmd", mode = EventOut)
    val tempChanged = Port[art.Empty] (id = portId"8", name = "TempControlSoftwareSystem_s_Instance_tcproc_tempControl_tempChanged", mode = EventIn)

    tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge(
      id = bridgeId"2",
      name = "TempControlSoftwareSystem_s_Instance_tcproc_tempControl",
      dispatchProtocol = Sporadic(min = 1000),
      dispatchTriggers = None(),

      currentTemp = currentTemp,
      fanAck = fanAck,
      setPoint = setPoint,
      fanCmd = fanCmd,
      tempChanged = tempChanged
    )
  }
  val TempControlSoftwareSystem_s_Instance_tcproc_operatorInterface : tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_Bridge = {
    val currentTemp = Port[TempSensor.Temperature_i] (id = portId"9", name = "TempControlSoftwareSystem_s_Instance_tcproc_operatorInterface_currentTemp", mode = DataIn)
    val setPoint = Port[TempControlSoftwareSystem.SetPoint_i] (id = portId"10", name = "TempControlSoftwareSystem_s_Instance_tcproc_operatorInterface_setPoint", mode = EventOut)
    val tempChanged = Port[art.Empty] (id = portId"11", name = "TempControlSoftwareSystem_s_Instance_tcproc_operatorInterface_tempChanged", mode = EventIn)

    tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_Bridge(
      id = bridgeId"3",
      name = "TempControlSoftwareSystem_s_Instance_tcproc_operatorInterface",
      dispatchProtocol = Periodic(period = 1000),
      dispatchTriggers = None(),

      currentTemp = currentTemp,
      setPoint = setPoint,
      tempChanged = tempChanged
    )
  }

  val ad : ArchitectureDescription = {
    TranspilerUtil.touch()

    ArchitectureDescription(
      components = IS[Art.BridgeId, Bridge] (TempControlSoftwareSystem_s_Instance_tcproc_tempSensor, TempControlSoftwareSystem_s_Instance_tcproc_fan, TempControlSoftwareSystem_s_Instance_tcproc_tempControl, TempControlSoftwareSystem_s_Instance_tcproc_operatorInterface),

      connections = IS[Art.ConnectionId, UConnection] (Connection(from = TempControlSoftwareSystem_s_Instance_tcproc_tempSensor.currentTemp, to = TempControlSoftwareSystem_s_Instance_tcproc_tempControl.currentTemp),
                                                       Connection(from = TempControlSoftwareSystem_s_Instance_tcproc_tempSensor.currentTemp, to = TempControlSoftwareSystem_s_Instance_tcproc_operatorInterface.currentTemp),
                                                       Connection(from = TempControlSoftwareSystem_s_Instance_tcproc_tempSensor.tempChanged, to = TempControlSoftwareSystem_s_Instance_tcproc_tempControl.tempChanged),
                                                       Connection(from = TempControlSoftwareSystem_s_Instance_tcproc_tempSensor.tempChanged, to = TempControlSoftwareSystem_s_Instance_tcproc_operatorInterface.tempChanged),
                                                       Connection(from = TempControlSoftwareSystem_s_Instance_tcproc_fan.fanAck, to = TempControlSoftwareSystem_s_Instance_tcproc_tempControl.fanAck),
                                                       Connection(from = TempControlSoftwareSystem_s_Instance_tcproc_tempControl.fanCmd, to = TempControlSoftwareSystem_s_Instance_tcproc_fan.fanCmd),
                                                       Connection(from = TempControlSoftwareSystem_s_Instance_tcproc_operatorInterface.setPoint, to = TempControlSoftwareSystem_s_Instance_tcproc_tempControl.setPoint))
    )
  }
}

object TranspilerUtil {
  def touch(): Unit = {
    if(F) {
      TranspilerToucher.touch()

      // add types used in Platform.receive and Platform.receiveAsync
      val mbox2Boolean_Payload: MBox2[Art.PortId, DataContent] = MBox2(portId"0", Base_Types.Boolean_Payload(T))
      val mbox2OptionDataContent: MBox2[Art.PortId, Option[DataContent]] = MBox2(portId"0", None())

      // touch process/thread timing properties
      println(Schedulers.TempControlSoftwareSystem_s_Instance_tcproc_tempSensor_timingProperties)
      println(Schedulers.TempControlSoftwareSystem_s_Instance_tcproc_fan_timingProperties)
      println(Schedulers.TempControlSoftwareSystem_s_Instance_tcproc_tempControl_timingProperties)
      println(Schedulers.TempControlSoftwareSystem_s_Instance_tcproc_operatorInterface_timingProperties)

      // touch each payload/type in case some are only used as a field in a record
      def printDataContent(a: art.DataContent): Unit = { println(s"${a}") }

      printDataContent(Base_Types.Float_32_Payload(Base_Types.Float_32_example()))
      printDataContent(Base_Types.Boolean_Payload(Base_Types.Boolean_example()))
      printDataContent(Base_Types.Integer_Payload(Base_Types.Integer_example()))
      printDataContent(Base_Types.Integer_8_Payload(Base_Types.Integer_8_example()))
      printDataContent(Base_Types.Integer_16_Payload(Base_Types.Integer_16_example()))
      printDataContent(Base_Types.Integer_32_Payload(Base_Types.Integer_32_example()))
      printDataContent(Base_Types.Integer_64_Payload(Base_Types.Integer_64_example()))
      printDataContent(Base_Types.Unsigned_8_Payload(Base_Types.Unsigned_8_example()))
      printDataContent(Base_Types.Unsigned_16_Payload(Base_Types.Unsigned_16_example()))
      printDataContent(Base_Types.Unsigned_32_Payload(Base_Types.Unsigned_32_example()))
      printDataContent(Base_Types.Unsigned_64_Payload(Base_Types.Unsigned_64_example()))
      printDataContent(Base_Types.Float_Payload(Base_Types.Float_example()))
      printDataContent(Base_Types.Float_64_Payload(Base_Types.Float_64_example()))
      printDataContent(Base_Types.Character_Payload(Base_Types.Character_example()))
      printDataContent(Base_Types.String_Payload(Base_Types.String_example()))
      printDataContent(TempSensor.Temperature_i_Payload(TempSensor.Temperature_i.example()))
      printDataContent(CoolingFan.FanCmd_Payload(CoolingFan.FanCmd.byOrdinal(0).get))
      printDataContent(CoolingFan.FanAck_Payload(CoolingFan.FanAck.byOrdinal(0).get))
      printDataContent(TempControlSoftwareSystem.SetPoint_i_Payload(TempControlSoftwareSystem.SetPoint_i.example()))
      printDataContent(art.Empty())

      {
        tc.TempSensor.TempSensor_s_tcproc_tempSensor_Bridge.c_initialization_api.get.logInfo("")
        tc.TempSensor.TempSensor_s_tcproc_tempSensor_Bridge.c_initialization_api.get.logDebug("")
        tc.TempSensor.TempSensor_s_tcproc_tempSensor_Bridge.c_initialization_api.get.logError("")
        tc.TempSensor.TempSensor_s_tcproc_tempSensor_Bridge.c_operational_api.get.logInfo("")
        tc.TempSensor.TempSensor_s_tcproc_tempSensor_Bridge.c_operational_api.get.logDebug("")
        tc.TempSensor.TempSensor_s_tcproc_tempSensor_Bridge.c_operational_api.get.logError("")
        tc.TempSensor.TempSensor_s_tcproc_tempSensor_Bridge.c_initialization_api.get.put_currentTemp(TempSensor.Temperature_i.example())
        tc.TempSensor.TempSensor_s_tcproc_tempSensor_Bridge.c_operational_api.get.put_currentTemp(TempSensor.Temperature_i.example())
        tc.TempSensor.TempSensor_s_tcproc_tempSensor_Bridge.c_initialization_api.get.put_tempChanged()
        tc.TempSensor.TempSensor_s_tcproc_tempSensor_Bridge.c_operational_api.get.put_tempChanged()
      }
      {
        tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_initialization_api.get.logInfo("")
        tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_initialization_api.get.logDebug("")
        tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_initialization_api.get.logError("")
        tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_operational_api.get.logInfo("")
        tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_operational_api.get.logDebug("")
        tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_operational_api.get.logError("")
        val apiUsage_fanCmd: Option[CoolingFan.FanCmd.Type] = tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_operational_api.get.get_fanCmd()
        tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_initialization_api.get.put_fanAck(CoolingFan.FanAck.byOrdinal(0).get)
        tc.CoolingFan.Fan_s_tcproc_fan_Bridge.c_operational_api.get.put_fanAck(CoolingFan.FanAck.byOrdinal(0).get)
      }
      {
        tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge.c_initialization_api.get.logInfo("")
        tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge.c_initialization_api.get.logDebug("")
        tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge.c_initialization_api.get.logError("")
        tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge.c_operational_api.get.logInfo("")
        tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge.c_operational_api.get.logDebug("")
        tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge.c_operational_api.get.logError("")
        val apiUsage_currentTemp: Option[TempSensor.Temperature_i] = tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge.c_operational_api.get.get_currentTemp()
        val apiUsage_fanAck: Option[CoolingFan.FanAck.Type] = tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge.c_operational_api.get.get_fanAck()
        val apiUsage_setPoint: Option[TempControlSoftwareSystem.SetPoint_i] = tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge.c_operational_api.get.get_setPoint()
        tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge.c_initialization_api.get.put_fanCmd(CoolingFan.FanCmd.byOrdinal(0).get)
        tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge.c_operational_api.get.put_fanCmd(CoolingFan.FanCmd.byOrdinal(0).get)
        val apiUsage_tempChanged: Option[art.Empty] = tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_Bridge.c_operational_api.get.get_tempChanged()
      }
      {
        tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_Bridge.c_initialization_api.get.logInfo("")
        tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_Bridge.c_initialization_api.get.logDebug("")
        tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_Bridge.c_initialization_api.get.logError("")
        tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_Bridge.c_operational_api.get.logInfo("")
        tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_Bridge.c_operational_api.get.logDebug("")
        tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_Bridge.c_operational_api.get.logError("")
        val apiUsage_currentTemp: Option[TempSensor.Temperature_i] = tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_Bridge.c_operational_api.get.get_currentTemp()
        tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_Bridge.c_initialization_api.get.put_setPoint(TempControlSoftwareSystem.SetPoint_i.example())
        tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_Bridge.c_operational_api.get.put_setPoint(TempControlSoftwareSystem.SetPoint_i.example())
        val apiUsage_tempChanged: Option[art.Empty] = tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_Bridge.c_operational_api.get.get_tempChanged()
      }
    }
  }
}

