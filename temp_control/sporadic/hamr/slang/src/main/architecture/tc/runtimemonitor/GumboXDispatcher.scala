// #Sireum

package tc.runtimemonitor

import org.sireum._
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object GumboXDispatcher {
  def checkContract(observationKind: ObservationKind.Type, preContainer: Option[art.DataContent], postContainer: Option[art.DataContent]): B = {
    observationKind match {
      case tc.runtimemonitor.ObservationKind.tempSensor_postInit =>
        val result: B = tc.TempSensor.TempSensor_s_tcproc_tempSensor_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[tc.TempSensor.TempSensor_s_tcproc_tempSensor_PostState_Container_PS])
        println(s"tempSensor.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.tempSensor_preCompute =>
        // checking the pre-state values of tempSensor's compute entrypoint is not required
        return T
      case tc.runtimemonitor.ObservationKind.tempSensor_postCompute =>
        val result: B = tc.TempSensor.TempSensor_s_tcproc_tempSensor_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[tc.TempSensor.TempSensor_s_tcproc_tempSensor_PreState_Container_PS], postContainer.get.asInstanceOf[tc.TempSensor.TempSensor_s_tcproc_tempSensor_PostState_Container_PS])
        println(s"tempSensor.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case tc.runtimemonitor.ObservationKind.fan_postInit =>
        // checking the post-state values of fan's initialise entrypoint is not required
        return T
      case tc.runtimemonitor.ObservationKind.fan_preCompute =>
        // checking the pre-state values of fan's compute entrypoint is not required
        return T
      case tc.runtimemonitor.ObservationKind.fan_postCompute =>
        // checking the post-state values of fan's compute entrypoint is not required
        return T

      case tc.runtimemonitor.ObservationKind.tempControl_postInit =>
        val result: B = tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_PostState_Container_PS])
        println(s"tempControl.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.tempControl_preCompute =>
        val result: B = tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_GumboX.compute_CEP_Pre_Container(preContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_PreState_Container_PS])
        println(s"tempControl.timeTriggered: Pre-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.tempControl_postCompute =>
        val result: B = tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_PreState_Container_PS], postContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_PostState_Container_PS])
        println(s"tempControl.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case tc.runtimemonitor.ObservationKind.operatorInterface_postInit =>
        val result: B = tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_PostState_Container_PS])
        println(s"operatorInterface.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.operatorInterface_preCompute =>
        val result: B = tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_GumboX.compute_CEP_Pre_Container(preContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_PreState_Container_PS])
        println(s"operatorInterface.timeTriggered: Pre-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.operatorInterface_postCompute =>
        val result: B = tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_PreState_Container_PS], postContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_PostState_Container_PS])
        println(s"operatorInterface.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case _ => halt("Infeasible")
    }
  }

  def genTestSuite(testCases: ISZ[(Z, ISZ[ST])]): Unit = {
    val tq = "\"\"\""

    val testRoot = Os.path(".") / "src" / "test" / "bridge"

    val TempSensor_s_tcproc_tempSensor_id = Arch.TempControlSoftwareSystem_s_Instance_tcproc_tempSensor.id
    val Fan_s_tcproc_fan_id = Arch.TempControlSoftwareSystem_s_Instance_tcproc_fan.id
    val TempControl_s_tcproc_tempControl_id = Arch.TempControlSoftwareSystem_s_Instance_tcproc_tempControl.id
    val OperatorInterface_s_tcproc_operatorInterface_id = Arch.TempControlSoftwareSystem_s_Instance_tcproc_operatorInterface.id

    def genUniqueSuiteName(path: Os.Path, prefix: String): String = {
      var i = 0
      while(true) {
        val cand = path / s"${prefix}_${i}.scala"
        if (!cand.exists) {
          return s"${prefix}_${i}"
        }
        i = i + 1
      }
      halt("Infeasible")
    }

    for (p <- testCases) {
      art.Art.BridgeId.fromZ(p._1) match {
        case TempSensor_s_tcproc_tempSensor_id =>
          val prefix = "TempSensor_s_tcproc_tempSensor_RM_TestSuite"
          val path = testRoot /+ ISZ("tc","TempSensor")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package tc.TempSensor
                |
                |import org.sireum._
                |import tc.TempSensor._
                |
                |class ${suiteName} extends TempSensor_s_tcproc_tempSensor_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case Fan_s_tcproc_fan_id =>
          val prefix = "Fan_s_tcproc_fan_RM_TestSuite"
          val path = testRoot /+ ISZ("tc","CoolingFan")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package tc.CoolingFan
                |
                |import org.sireum._
                |import tc.CoolingFan._
                |
                |class ${suiteName} extends Fan_s_tcproc_fan_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case TempControl_s_tcproc_tempControl_id =>
          val prefix = "TempControl_s_tcproc_tempControl_RM_TestSuite"
          val path = testRoot /+ ISZ("tc","TempControlSoftwareSystem")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package tc.TempControlSoftwareSystem
                |
                |import org.sireum._
                |import tc.TempControlSoftwareSystem._
                |
                |class ${suiteName} extends TempControl_s_tcproc_tempControl_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case OperatorInterface_s_tcproc_operatorInterface_id =>
          val prefix = "OperatorInterface_s_tcproc_operatorInterface_RM_TestSuite"
          val path = testRoot /+ ISZ("tc","TempControlSoftwareSystem")
          val suiteName = genUniqueSuiteName(path, prefix)

          val testSuite =
            st"""package tc.TempControlSoftwareSystem
                |
                |import org.sireum._
                |import tc.TempControlSoftwareSystem._
                |
                |class ${suiteName} extends OperatorInterface_s_tcproc_operatorInterface_GumboX_TestHarness_ScalaTest {
                |  val verbose: B = true
                |
                |  var i = 0 // ensures generated test case names are unique
                |  def incrementI: Int = {
                |    i += 1
                |    return i
                |  }
                |
                |  ${(p._2, "\nincrementI\n\n")}
                |}"""
          val filename = path / s"${suiteName}.scala"
          filename.writeOver(testSuite.render)
          println(s"Wrote: ${filename.toUri}")
        case x => halt(s"Infeasible bridge id: $x")
      }
    }
  }

  def genTestCase(observationKind: ObservationKind.Type, preContainer: Option[String], postContainer: Option[String], testNameSuffix: Option[String]): ST = {
    val tq = "\"\"\""
    val suffix: String =
      if (testNameSuffix.nonEmpty) testNameSuffix.get
      else ""

    observationKind match {
      case tc.runtimemonitor.ObservationKind.tempSensor_postInit =>
        return (st"""// Begin test cases for tempSensor_postInit
                    |
                    |test(s"tempSensor_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = tc.JSON.toTempSensorTempSensor_s_tcproc_tempSensor_PostState_Container_PS(postJson).left
                    |  assert(tc.TempSensor.TempSensor_s_tcproc_tempSensor_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for tempSensor_postInit""")
      case tc.runtimemonitor.ObservationKind.tempSensor_preCompute =>
        return (st"""// Begin test cases for tempSensor_preCompute
                    |
                    |test(s"tempSensor_preCompute: Run testComputeCBV$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempSensorTempSensor_s_tcproc_tempSensor_PreState_Container_PS(preJson).left
                    |  println(testComputeCBV(preContainer))
                    |}
                    |// End test cases for tempSensor_preCompute""")
      case tc.runtimemonitor.ObservationKind.tempSensor_postCompute =>
        return (st"""// Begin test cases for tempSensor_postCompute
                    |
                    |test(s"tempSensor_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempSensorTempSensor_s_tcproc_tempSensor_PreState_Container_PS(preJson).left
                    |  val postContainer = tc.JSON.toTempSensorTempSensor_s_tcproc_tempSensor_PostState_Container_PS(postJson).left
                    |  assert(tc.TempSensor.TempSensor_s_tcproc_tempSensor_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |
                    |test(s"tempSensor_postCompute: Run testComputeCBV$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempSensorTempSensor_s_tcproc_tempSensor_PreState_Container_PS(preJson).left
                    |  println(testComputeCBV(preContainer))
                    |}
                    |// End test cases for tempSensor_postCompute""")

      case tc.runtimemonitor.ObservationKind.tempControl_postInit =>
        return (st"""// Begin test cases for tempControl_postInit
                    |
                    |test(s"tempControl_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = tc.JSON.toTempControlSoftwareSystemTempControl_s_tcproc_tempControl_PostState_Container_PS(postJson).left
                    |  assert(tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for tempControl_postInit""")
      case tc.runtimemonitor.ObservationKind.tempControl_preCompute =>
        return (st"""// Begin test cases for tempControl_preCompute
                    |
                    |test(s"tempControl_preCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempControlSoftwareSystemTempControl_s_tcproc_tempControl_PreState_Container_PS(preJson).left
                    |  assert(tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |// End test cases for tempControl_preCompute""")
      case tc.runtimemonitor.ObservationKind.tempControl_postCompute =>
        return (st"""// Begin test cases for tempControl_postCompute
                    |
                    |test(s"tempControl_postCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempControlSoftwareSystemTempControl_s_tcproc_tempControl_PreState_Container_PS(preJson).left
                    |  assert(tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |
                    |test(s"tempControl_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempControlSoftwareSystemTempControl_s_tcproc_tempControl_PreState_Container_PS(preJson).left
                    |  val postContainer = tc.JSON.toTempControlSoftwareSystemTempControl_s_tcproc_tempControl_PostState_Container_PS(postJson).left
                    |  assert(tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |// End test cases for tempControl_postCompute""")
      case tc.runtimemonitor.ObservationKind.operatorInterface_postInit =>
        return (st"""// Begin test cases for operatorInterface_postInit
                    |
                    |test(s"operatorInterface_postInit: Check Post-condition$suffix") {
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val postContainer = tc.JSON.toTempControlSoftwareSystemOperatorInterface_s_tcproc_operatorInterface_PostState_Container_PS(postJson).left
                    |  assert(tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_GumboX.inititialize_IEP_Post_Container(postContainer))
                    |}
                    |// End test cases for operatorInterface_postInit""")
      case tc.runtimemonitor.ObservationKind.operatorInterface_preCompute =>
        return (st"""// Begin test cases for operatorInterface_preCompute
                    |
                    |test(s"operatorInterface_preCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempControlSoftwareSystemOperatorInterface_s_tcproc_operatorInterface_PreState_Container_PS(preJson).left
                    |  assert(tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |
                    |test(s"operatorInterface_preCompute: Run testComputeCBV$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempControlSoftwareSystemOperatorInterface_s_tcproc_operatorInterface_PreState_Container_PS(preJson).left
                    |  println(testComputeCBV(preContainer))
                    |}
                    |// End test cases for operatorInterface_preCompute""")
      case tc.runtimemonitor.ObservationKind.operatorInterface_postCompute =>
        return (st"""// Begin test cases for operatorInterface_postCompute
                    |
                    |test(s"operatorInterface_postCompute: Check Pre-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempControlSoftwareSystemOperatorInterface_s_tcproc_operatorInterface_PreState_Container_PS(preJson).left
                    |  assert(tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_GumboX.compute_CEP_Pre_Container(preContainer))
                    |}
                    |
                    |test(s"operatorInterface_postCompute: Check Post-condition$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val postJson: String = st${tq}${postContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempControlSoftwareSystemOperatorInterface_s_tcproc_operatorInterface_PreState_Container_PS(preJson).left
                    |  val postContainer = tc.JSON.toTempControlSoftwareSystemOperatorInterface_s_tcproc_operatorInterface_PostState_Container_PS(postJson).left
                    |  assert(tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_GumboX.compute_CEP_Post_Container(preContainer, postContainer))
                    |}
                    |
                    |test(s"operatorInterface_postCompute: Run testComputeCBV$suffix") {
                    |  val preJson: String = st${tq}${preContainer.get}${tq}.render
                    |  val preContainer = tc.JSON.toTempControlSoftwareSystemOperatorInterface_s_tcproc_operatorInterface_PreState_Container_PS(preJson).left
                    |  println(testComputeCBV(preContainer))
                    |}
                    |// End test cases for operatorInterface_postCompute""")
      case _ => return st"// TODO ${observationKind}"
    }
  }

  def getUpdates(bridge: art.Art.BridgeId, observationKind: ObservationKind.Type, container: art.DataContent): Map[String, String] = {
    observationKind match {
      case tc.runtimemonitor.ObservationKind.tempSensor_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[tc.TempSensor.TempSensor_s_tcproc_tempSensor_PostState_Container_PS]
        updates = updates + "currentTemp" ~> postContainer.api_currentTemp.string
        if (postContainer.api_tempChanged.nonEmpty) {
          updates = updates + "tempChanged" ~> postContainer.api_tempChanged.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.tempControl_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_PostState_Container_PS]
        updates = updates + "currentSetPoint" ~> postContainer.currentSetPoint.string
        updates = updates + "currentFanState" ~> postContainer.currentFanState.string
        updates = updates + "latestTemp" ~> postContainer.latestTemp.string
        if (postContainer.api_fanCmd.nonEmpty) {
          updates = updates + "fanCmd" ~> postContainer.api_fanCmd.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.operatorInterface_postInit =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_PostState_Container_PS]
        if (postContainer.api_setPoint.nonEmpty) {
          updates = updates + "setPoint" ~> postContainer.api_setPoint.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.tempControl_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_PreState_Container_PS]
        updates = updates + "In_currentSetPoint" ~> preContainer.In_currentSetPoint.string
        updates = updates + "In_currentFanState" ~> preContainer.In_currentFanState.string
        updates = updates + "In_latestTemp" ~> preContainer.In_latestTemp.string
        updates = updates + "currentTemp" ~> preContainer.api_currentTemp.string
        if (preContainer.api_fanAck.nonEmpty) {
          updates = updates + "fanAck" ~> preContainer.api_fanAck.get.string
        }
        if (preContainer.api_setPoint.nonEmpty) {
          updates = updates + "setPoint" ~> preContainer.api_setPoint.get.string
        }
        if (preContainer.api_tempChanged.nonEmpty) {
          updates = updates + "tempChanged" ~> preContainer.api_tempChanged.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.operatorInterface_preCompute =>
        var updates: Map[String, String] = Map.empty
        val preContainer = container.asInstanceOf[tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_PreState_Container_PS]
        updates = updates + "currentTemp" ~> preContainer.api_currentTemp.string
        if (preContainer.api_tempChanged.nonEmpty) {
          updates = updates + "tempChanged" ~> preContainer.api_tempChanged.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.tempSensor_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[tc.TempSensor.TempSensor_s_tcproc_tempSensor_PostState_Container_PS]
        updates = updates + "currentTemp" ~> postContainer.api_currentTemp.string
        if (postContainer.api_tempChanged.nonEmpty) {
          updates = updates + "tempChanged" ~> postContainer.api_tempChanged.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.tempControl_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_PostState_Container_PS]
        updates = updates + "currentSetPoint" ~> postContainer.currentSetPoint.string
        updates = updates + "currentFanState" ~> postContainer.currentFanState.string
        updates = updates + "latestTemp" ~> postContainer.latestTemp.string
        if (postContainer.api_fanCmd.nonEmpty) {
          updates = updates + "fanCmd" ~> postContainer.api_fanCmd.get.string
        }
        return updates
      case tc.runtimemonitor.ObservationKind.operatorInterface_postCompute =>
        var updates: Map[String, String] = Map.empty
        val postContainer = container.asInstanceOf[tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_PostState_Container_PS]
        if (postContainer.api_setPoint.nonEmpty) {
          updates = updates + "setPoint" ~> postContainer.api_setPoint.get.string
        }
        return updates
      case _ => return Map.empty
    }
  }
}