// #Sireum

package tc.runtimemonitor

import org.sireum._
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object GumboXDispatcher {
  def dispatch(observationKind: ObservationKind.Type, preContainer: Option[art.DataContent], postContainer: Option[art.DataContent]): B = {
    observationKind match {
      case tc.runtimemonitor.ObservationKind.tempSensor_postInit =>
        val result: B = tc.TempSensor.TempSensor_s_tcproc_tempSensor_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[tc.TempSensor.TempSensor_s_tcproc_tempSensor_PostState_wLContainer])
        println(s"tempSensor.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.tempSensor_preCompute =>
        // checking the pre-state values of tempSensor's compute entrypoint is not required
        return T
      case tc.runtimemonitor.ObservationKind.tempSensor_postCompute =>
        val result: B = tc.TempSensor.TempSensor_s_tcproc_tempSensor_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[tc.TempSensor.TempSensor_s_tcproc_tempSensor_PreState_wLContainer], postContainer.get.asInstanceOf[tc.TempSensor.TempSensor_s_tcproc_tempSensor_PostState_wLContainer])
        println(s"tempSensor.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case tc.runtimemonitor.ObservationKind.fan_postInit =>
        // checking the post-state values of fan's initialise entrypoint is not required
        return T
      case tc.runtimemonitor.ObservationKind.fan_preCompute =>
        // checking the pre-state values of fan's compute entrypoint is not required
        return T
      case tc.runtimemonitor.ObservationKind.fan_postCompute =>
        // checking the post-state values of fan's compute entrypoint is not required
        return T

      case tc.runtimemonitor.ObservationKind.tempControl_postInit =>
        val result: B = tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_PostState_wLContainer])
        println(s"tempControl.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.tempControl_preCompute =>
        val result: B = tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_GumboX.compute_CEP_Pre_Container(preContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_PreState_wLContainer])
        println(s"tempControl.timeTriggered: Pre-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.tempControl_postCompute =>
        val result: B = tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_PreState_wLContainer], postContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.TempControl_s_tcproc_tempControl_PostState_wLContainer])
        println(s"tempControl.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case tc.runtimemonitor.ObservationKind.operatorInterface_postInit =>
        val result: B = tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_GumboX.inititialize_IEP_Post_Container(postContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_PostState_wLContainer])
        println(s"operatorInterface.initialise: Post-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.operatorInterface_preCompute =>
        val result: B = tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_GumboX.compute_CEP_Pre_Container(preContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_PreState_wLContainer])
        println(s"operatorInterface.timeTriggered: Pre-condition: ${if (result) "" else "un"}satisfied")
        return result
      case tc.runtimemonitor.ObservationKind.operatorInterface_postCompute =>
        val result: B = tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_GumboX.compute_CEP_Post_Container(preContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_PreState_wLContainer], postContainer.get.asInstanceOf[tc.TempControlSoftwareSystem.OperatorInterface_s_tcproc_operatorInterface_PostState_wLContainer])
        println(s"operatorInterface.timeTriggered: Post-condition: ${if (result) "" else "un"}satisfied")
        return result

      case _ => halt("Infeasible")
    }
  }
}