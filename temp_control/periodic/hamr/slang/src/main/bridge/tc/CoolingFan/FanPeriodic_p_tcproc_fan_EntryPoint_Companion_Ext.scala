package tc.CoolingFan

import org.sireum._
import art._
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object FanPeriodic_p_tcproc_fan_EntryPoint_Companion_Ext {

  var last_api_fanAck: CoolingFan.FanAck.Type = _

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    FanPeriodic_p_tcproc_fan_PostState_wLContainer(
      api_fanAck = Art.observeOutPortValue(Arch.TempControlSoftwareSystem_p_Instance_tcproc_fan.operational_api.fanAck_Id).get match {
        case Some(CoolingFan.FanAck_Payload(value)) =>
          last_api_fanAck = value
          value
        case _ => last_api_fanAck
      })
  }

  def pre_compute(): Unit = {
    FanPeriodic_p_tcproc_fan_PreState_wLContainer(
      api_fanCmd = Art.observeOutPortValue(Arch.TempControlSoftwareSystem_p_Instance_tcproc_fan.operational_api.fanCmd_Id).get.get.asInstanceOf[CoolingFan.FanCmd.Type])
  }

  def post_compute(): Unit = {
    FanPeriodic_p_tcproc_fan_PostState_wLContainer(
      api_fanAck = Art.observeOutPortValue(Arch.TempControlSoftwareSystem_p_Instance_tcproc_fan.operational_api.fanAck_Id).get match {
        case Some(CoolingFan.FanAck_Payload(value)) =>
          last_api_fanAck = value
          value
        case _ => last_api_fanAck
      })
  }
}