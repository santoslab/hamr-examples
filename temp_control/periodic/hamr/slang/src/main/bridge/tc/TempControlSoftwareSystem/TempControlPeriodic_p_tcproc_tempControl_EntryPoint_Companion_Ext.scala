package tc.TempControlSoftwareSystem

import org.sireum._
import art._
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object TempControlPeriodic_p_tcproc_tempControl_EntryPoint_Companion_Ext {

  var last_api_fanCmd: CoolingFan.FanCmd.Type = _

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    TempControlPeriodic_p_tcproc_tempControl_PostState_wLContainer(
      api_fanCmd = Art.observeOutPortValue(Arch.TempControlSoftwareSystem_p_Instance_tcproc_tempControl.operational_api.fanCmd_Id).get match {
        case Some(CoolingFan.FanCmd_Payload(value)) =>
          last_api_fanCmd = value
          value
        case _ => last_api_fanCmd
      })
  }

  def pre_compute(): Unit = {
    TempControlPeriodic_p_tcproc_tempControl_PreState_wLContainer(
      In_latestFanCmd = tc.TempControlSoftwareSystem.TempControlPeriodic_p_tcproc_tempControl.latestFanCmd, 
      api_currentTemp = Art.observeOutPortValue(Arch.TempControlSoftwareSystem_p_Instance_tcproc_tempControl.operational_api.currentTemp_Id).get.get.asInstanceOf[TempSensor.Temperature_i], 
      api_fanAck = Art.observeOutPortValue(Arch.TempControlSoftwareSystem_p_Instance_tcproc_tempControl.operational_api.fanAck_Id).get.get.asInstanceOf[CoolingFan.FanAck.Type], 
      api_setPoint = Art.observeOutPortValue(Arch.TempControlSoftwareSystem_p_Instance_tcproc_tempControl.operational_api.setPoint_Id).get.get.asInstanceOf[TempControlSoftwareSystem.SetPoint_i])
  }

  def post_compute(): Unit = {
    TempControlPeriodic_p_tcproc_tempControl_PostState_wLContainer(
      api_fanCmd = Art.observeOutPortValue(Arch.TempControlSoftwareSystem_p_Instance_tcproc_tempControl.operational_api.fanCmd_Id).get match {
        case Some(CoolingFan.FanCmd_Payload(value)) =>
          last_api_fanCmd = value
          value
        case _ => last_api_fanCmd
      })
  }
}