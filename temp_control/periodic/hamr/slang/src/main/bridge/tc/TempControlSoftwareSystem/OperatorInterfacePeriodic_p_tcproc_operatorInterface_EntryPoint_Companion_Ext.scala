package tc.TempControlSoftwareSystem

import org.sireum._
import art._
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object OperatorInterfacePeriodic_p_tcproc_operatorInterface_EntryPoint_Companion_Ext {

  var last_api_setPoint: TempControlSoftwareSystem.SetPoint_i = _

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    OperatorInterfacePeriodic_p_tcproc_operatorInterface_PostState_wLContainer(
      api_setPoint = Art.observeOutPortValue(Arch.TempControlSoftwareSystem_p_Instance_tcproc_operatorInterface.operational_api.setPoint_Id).get match {
        case Some(TempControlSoftwareSystem.SetPoint_i_Payload(value)) =>
          last_api_setPoint = value
          value
        case _ => last_api_setPoint
      })
  }

  def pre_compute(): Unit = {
    OperatorInterfacePeriodic_p_tcproc_operatorInterface_PreState_wLContainer(
      api_currentTemp = Art.observeOutPortValue(Arch.TempControlSoftwareSystem_p_Instance_tcproc_operatorInterface.operational_api.currentTemp_Id).get.asInstanceOf[Option[TempSensor.Temperature_i]].get)
  }

  def post_compute(): Unit = {
    OperatorInterfacePeriodic_p_tcproc_operatorInterface_PostState_wLContainer(
      api_setPoint = Art.observeOutPortValue(Arch.TempControlSoftwareSystem_p_Instance_tcproc_operatorInterface.operational_api.setPoint_Id).get match {
        case Some(TempControlSoftwareSystem.SetPoint_i_Payload(value)) =>
          last_api_setPoint = value
          value
        case _ => last_api_setPoint
      })
  }
}