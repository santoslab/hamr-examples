// #Sireum

package tc.TempControlSoftwareSystem

import org.sireum._
import art._
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object TempControlPeriodic_p_tcproc_tempControl_EntryPoint_Companion {

  var last_api_fanCmd: Option[CoolingFan.FanCmd.Type] = None()

  /** get the value of outgoing data port fanCmd.  If a 'fresh' value wasn't sent
    * during the last dispatch then return last_api_fanCmd.get.
    * Note: this requires outgoing data ports to be initialized during the
    * initialization phase or prior to system testing.
    */
  def get_api_fanCmd: CoolingFan.FanCmd.Type = {
    Art.observeOutPortVariable(Arch.TempControlSoftwareSystem_p_Instance_tcproc_tempControl.operational_api.fanCmd_Id) match {
      case Some(CoolingFan.FanCmd_Payload(value)) =>
        last_api_fanCmd = Some(value)
        return value
      case _ if last_api_fanCmd.isEmpty =>
        assert(F, "No value found on outgoing data port fanCmd.\n                  Note: values placed during the initialization phase will persist across dispatches")
        halt("No value found on outgoing data port fanCmd.\n                  Note: values placed during the initialization phase will persist across dispatches")
      case _ => return last_api_fanCmd.get
    }
  }
  var preStateContainer_wL: Option[TempControlPeriodic_p_tcproc_tempControl_PreState_Container_PS] = None()

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      TempControlPeriodic_p_tcproc_tempControl_PostState_Container_PS(
        latestFanCmd = tc.TempControlSoftwareSystem.TempControlPeriodic_p_tcproc_tempControl.latestFanCmd,
        api_fanCmd = get_api_fanCmd)

    // the rest can now be performed via a different thread
    tc.runtimemonitor.RuntimeMonitor.observeInitialisePostState(Arch.TempControlSoftwareSystem_p_Instance_tcproc_tempControl.id, tc.runtimemonitor.ObservationKind.TempControlSoftwareSystem_p_Instance_tcproc_tempControl_postInit, postStateContainer_wL)
  }

  def pre_compute(): Unit = {
    // block the component while its pre-state values are retrieved
    preStateContainer_wL = Some(
      TempControlPeriodic_p_tcproc_tempControl_PreState_Container_PS(
        In_latestFanCmd = tc.TempControlSoftwareSystem.TempControlPeriodic_p_tcproc_tempControl.latestFanCmd, 
        api_currentTemp = Art.observeInPortVariable(Arch.TempControlSoftwareSystem_p_Instance_tcproc_tempControl.operational_api.currentTemp_Id).get.asInstanceOf[TempSensor.Temperature_i_Payload].value, 
        api_fanAck = Art.observeInPortVariable(Arch.TempControlSoftwareSystem_p_Instance_tcproc_tempControl.operational_api.fanAck_Id).get.asInstanceOf[CoolingFan.FanAck_Payload].value, 
        api_setPoint = Art.observeInPortVariable(Arch.TempControlSoftwareSystem_p_Instance_tcproc_tempControl.operational_api.setPoint_Id).get.asInstanceOf[TempControlSoftwareSystem.SetPoint_i_Payload].value))

    // the rest can now be performed via a different thread
    tc.runtimemonitor.RuntimeMonitor.observeComputePreState(Arch.TempControlSoftwareSystem_p_Instance_tcproc_tempControl.id, tc.runtimemonitor.ObservationKind.TempControlSoftwareSystem_p_Instance_tcproc_tempControl_preCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]])
  }

  def post_compute(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      TempControlPeriodic_p_tcproc_tempControl_PostState_Container_PS(
        latestFanCmd = tc.TempControlSoftwareSystem.TempControlPeriodic_p_tcproc_tempControl.latestFanCmd,
        api_fanCmd = get_api_fanCmd)

    // the rest can now be performed via a different thread
    tc.runtimemonitor.RuntimeMonitor.observeComputePrePostState(Arch.TempControlSoftwareSystem_p_Instance_tcproc_tempControl.id, tc.runtimemonitor.ObservationKind.TempControlSoftwareSystem_p_Instance_tcproc_tempControl_postCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]], postStateContainer_wL)
  }
}