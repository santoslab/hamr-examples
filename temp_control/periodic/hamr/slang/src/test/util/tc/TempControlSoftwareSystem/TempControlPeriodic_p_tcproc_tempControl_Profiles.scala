// #Sireum

package tc.TempControlSoftwareSystem

import org.sireum._
import tc.util.Profile
import tc.util.EmptyContainer
import tc.RandomLib

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// Profile for initialise entrypoint
@msig trait TempControlPeriodic_p_tcproc_tempControl_Profile_Trait extends Profile

@record class TempControlPeriodic_p_tcproc_tempControl_Profile (
  val name: String,
) extends TempControlPeriodic_p_tcproc_tempControl_Profile_Trait {

  override def next: EmptyContainer = {
    return EmptyContainer()
  }
}

// Profile with generators for incoming ports
@msig trait TempControlPeriodic_p_tcproc_tempControl_Profile_P_Trait extends Profile {
  def api_currentTemp: RandomLib // random lib for generating TempSensor.Temperature_i
  def api_fanAck: RandomLib // random lib for generating CoolingFan.FanAck
  def api_setPoint: RandomLib // random lib for generating TempControlSoftwareSystem.SetPoint_i
}

@record class TempControlPeriodic_p_tcproc_tempControl_Profile_P(
  val name: String,
  var api_currentTemp: RandomLib, // random lib for generating TempSensor.Temperature_i
  var api_fanAck: RandomLib, // random lib for generating CoolingFan.FanAck
  var api_setPoint: RandomLib // random lib for generating TempControlSoftwareSystem.SetPoint_i
  ) extends TempControlPeriodic_p_tcproc_tempControl_Profile_P_Trait {

  override def next: TempControlPeriodic_p_tcproc_tempControl_PreState_Container_P = {
    return (TempControlPeriodic_p_tcproc_tempControl_PreState_Container_P (
      api_currentTemp = api_currentTemp.nextTempSensorTemperature_i(),
      api_fanAck = api_fanAck.nextCoolingFanFanAckType(),
      api_setPoint = api_setPoint.nextTempControlSoftwareSystemSetPoint_i()))
  }
}

// Profile with generators for state variables and incoming ports
@msig trait TempControlPeriodic_p_tcproc_tempControl_Profile_PS_Trait extends TempControlPeriodic_p_tcproc_tempControl_Profile_P_Trait {
  def In_latestFanCmd: RandomLib // random lib for generating CoolingFan.FanCmd
  def api_currentTemp: RandomLib // random lib for generating TempSensor.Temperature_i
  def api_fanAck: RandomLib // random lib for generating CoolingFan.FanAck
  def api_setPoint: RandomLib // random lib for generating TempControlSoftwareSystem.SetPoint_i
}

@record class TempControlPeriodic_p_tcproc_tempControl_Profile_PS(
  val name: String,
  var In_latestFanCmd: RandomLib, // random lib for generating CoolingFan.FanCmd
  var api_currentTemp: RandomLib, // random lib for generating TempSensor.Temperature_i
  var api_fanAck: RandomLib, // random lib for generating CoolingFan.FanAck
  var api_setPoint: RandomLib // random lib for generating TempControlSoftwareSystem.SetPoint_i
  ) extends TempControlPeriodic_p_tcproc_tempControl_Profile_PS_Trait {

  override def next: TempControlPeriodic_p_tcproc_tempControl_PreState_Container_PS = {
    return (TempControlPeriodic_p_tcproc_tempControl_PreState_Container_PS (
      In_latestFanCmd = In_latestFanCmd.nextCoolingFanFanCmdType(),
      api_currentTemp = api_currentTemp.nextTempSensorTemperature_i(),
      api_fanAck = api_fanAck.nextCoolingFanFanAckType(),
      api_setPoint = api_setPoint.nextTempControlSoftwareSystemSetPoint_i()))
  }
}
