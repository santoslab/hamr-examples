package tc.TempSensor

import org.sireum._
import tc.TempSensor._
import tc.GumboXUtil
import tc.GumboXUtil.GumboXResult
import tc.RandomLib
import org.sireum.Random.Gen64
import org.sireum.Random.Impl.Xoshiro256

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

trait TempSensorPeriodic_p_tcproc_tempSensor_GumboX_TestHarness_ScalaTest_Generator extends TempSensorPeriodic_p_tcproc_tempSensor_GumboX_TestHarness_ScalaTest {

  def failOnUnsatPreconditions: B = F

  def seedGen: Gen64 = Random.Gen64Impl(Xoshiro256.create)

  def getProfiles_P: ISZ[TempSensorPeriodic_p_tcproc_tempSensor_Profile_P]

  def getDefaultProfile_P: TempSensorPeriodic_p_tcproc_tempSensor_Profile_P = {
    return TempSensorPeriodic_p_tcproc_tempSensor_Profile_P (
      name = "Default Port Profile", 
      numTests = 100)
  }

  def next(profile: TempSensorPeriodic_p_tcproc_tempSensor_Profile_P): Option[TempSensorPeriodic_p_tcproc_tempSensor_PreState_Container_P] = {
    try {

      return Some(TempSensorPeriodic_p_tcproc_tempSensor_PreState_Container_P())
    } catch {
      case e: AssertionError =>
       // SlangCheck was unable to satisfy a datatype's filter
       return None()
    }
  }

  def numInitialiseTests: Z = 100

  {
    for (i <- 0 to numInitialiseTests) {
      this.registerTest(s"testInitialiseCB_$i") {
        testInitialiseCB() match {
          case GumboXResult.Pre_Condition_Unsat =>
            halt("Infeasible as initialize entry points cannot contain assume clauses and cannot access incoming ports or state variables")
          case GumboXResult.Post_Condition_Fail =>
            fail ("Post condition did not hold")
          case GumboXResult.Post_Condition_Pass =>
            if (verbose) {
              println ("Success!")
            }
        }
      }
    }
  }

  for (profile <- getProfiles_P) {
    testComputeCB_Profile_P(profile)
  }

  def testComputeCB_Profile_P(profile: TempSensorPeriodic_p_tcproc_tempSensor_Profile_P): Unit = {
    for (i <- 0 to profile.numTests) {
      this.registerTest(s"Profile \"${profile.name}\": testComputeCB_$i") {
        var retry: B = T

        var j: Z = 0
        while (j < GumboXUtil.numTestVectorGenRetries && retry) {
          next(profile) match {
            case Some(o) =>

              if (verbose && j > 0) {
                println(s"Retry $j:")
              }

              val results = testComputeCBV(o)

              results match {
                case GumboXResult.Pre_Condition_Unsat =>
                case GumboXResult.Post_Condition_Fail =>
                  fail ("Post condition did not hold")
                  retry = F
                case GumboXResult.Post_Condition_Pass =>
                  if (verbose) {
                    println ("Success!")
                  }
                  retry = F
              }
            case _ =>
          }
          j = j + 1
        }

        if (retry) {
          if (failOnUnsatPreconditions) {
            fail ("Unable to satisfy precondition")
          } else if (verbose) {
            cprintln(T, "Unable to satisfy precondition")
          }
        }
      }
    }
  }
}