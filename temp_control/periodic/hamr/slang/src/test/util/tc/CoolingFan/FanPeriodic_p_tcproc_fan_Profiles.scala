// #Sireum

package tc.CoolingFan

import org.sireum._
import tc.util.Profile
import tc.util.EmptyContainer
import tc.RandomLib

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// Profile for initialise entrypoint
@msig trait FanPeriodic_p_tcproc_fan_Profile_Trait extends Profile

@record class FanPeriodic_p_tcproc_fan_Profile (
  val name: String,
) extends FanPeriodic_p_tcproc_fan_Profile_Trait {

  override def next: EmptyContainer = {
    return EmptyContainer()
  }
}

// Profile with generators for incoming ports
@msig trait FanPeriodic_p_tcproc_fan_Profile_P_Trait extends Profile {
  def api_fanCmd: RandomLib // random lib for generating CoolingFan.FanCmd
}

@record class FanPeriodic_p_tcproc_fan_Profile_P(
  val name: String,
  var api_fanCmd: RandomLib // random lib for generating CoolingFan.FanCmd
  ) extends FanPeriodic_p_tcproc_fan_Profile_P_Trait {

  override def next: FanPeriodic_p_tcproc_fan_PreState_Container_P = {
    return (FanPeriodic_p_tcproc_fan_PreState_Container_P (
      api_fanCmd = api_fanCmd.nextCoolingFanFanCmdType()))
  }
}

// Profile with generators for state variables and incoming ports
@msig trait FanPeriodic_p_tcproc_fan_Profile_PS_Trait extends FanPeriodic_p_tcproc_fan_Profile_P_Trait {
  def api_fanCmd: RandomLib // random lib for generating CoolingFan.FanCmd
}

@record class FanPeriodic_p_tcproc_fan_Profile_PS(
  val name: String,
  var api_fanCmd: RandomLib // random lib for generating CoolingFan.FanCmd
  ) extends FanPeriodic_p_tcproc_fan_Profile_PS_Trait {

  override def next: FanPeriodic_p_tcproc_fan_PreState_Container_PS = {
    return (FanPeriodic_p_tcproc_fan_PreState_Container_PS (
      api_fanCmd = api_fanCmd.nextCoolingFanFanCmdType()))
  }
}
