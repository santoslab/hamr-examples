// #Sireum

package tc.CoolingFan

import org.sireum._
import art._
import tc.SystemTestSuiteSlang.runtimeMonitorStream
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object FanPeriodic_p_tcproc_fan_SystemTestAPI {
  /** helper method to set the values of all incoming ports
    * @param api_fanCmd incoming data port
    */
  def put_concrete_inputs(api_fanCmd: CoolingFan.FanCmd.Type): Unit = {
    put_fanCmd(api_fanCmd)
  }

  // setter for incoming data port
  def put_fanCmd(value: CoolingFan.FanCmd.Type): Unit = {
    Art.insertInInfrastructurePort(Arch.TempControlSoftwareSystem_p_Instance_tcproc_fan.operational_api.fanCmd_Id, CoolingFan.FanCmd_Payload(value))
  }

  def fetchContainer(): tc.CoolingFan.FanPeriodic_p_tcproc_fan_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.TempControlSoftwareSystem_p_Instance_tcproc_fan.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.TempControlSoftwareSystem_p_Instance_tcproc_fan.id).get
      return postContainer_.asInstanceOf[tc.CoolingFan.FanPeriodic_p_tcproc_fan_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.TempControlSoftwareSystem_p_Instance_tcproc_fan.name}")
      halt(s"No post state recorded for ${Arch.TempControlSoftwareSystem_p_Instance_tcproc_fan.name}")
    }
  }

  def check_concrete_outputs(api_fanAck: CoolingFan.FanAck.Type): Unit = {
    var failureReasons: ISZ[ST] = ISZ()

    val actual_fanAck = get_api_fanAck()
    if (api_fanAck != actual_fanAck) {
      failureReasons = failureReasons :+ st"'fanAck' did not match expected.  Expected: $api_fanAck, Actual: $actual_fanAck"
    }

    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }

  def get_api_fanAck(): CoolingFan.FanAck.Type = {
    return fetchContainer().api_fanAck
  }
}