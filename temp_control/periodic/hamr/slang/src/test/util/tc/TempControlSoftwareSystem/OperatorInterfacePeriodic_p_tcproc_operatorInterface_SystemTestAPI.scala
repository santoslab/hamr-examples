// #Sireum

package tc.TempControlSoftwareSystem

import org.sireum._
import art._
import tc.SystemTestSuiteSlang.runtimeMonitorStream
import tc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object OperatorInterfacePeriodic_p_tcproc_operatorInterface_SystemTestAPI {
  /** helper method to set the values of all incoming ports
    * @param api_currentTemp incoming data port
    */
  def put_concrete_inputs(api_currentTemp: TempSensor.Temperature_i): Unit = {
    put_currentTemp(api_currentTemp)
  }

  // setter for incoming data port
  def put_currentTemp(value: TempSensor.Temperature_i): Unit = {
    Art.insertInInfrastructurePort(Arch.TempControlSoftwareSystem_p_Instance_tcproc_operatorInterface.operational_api.currentTemp_Id, TempSensor.Temperature_i_Payload(value))
  }

  def fetchContainer(): tc.TempControlSoftwareSystem.OperatorInterfacePeriodic_p_tcproc_operatorInterface_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.TempControlSoftwareSystem_p_Instance_tcproc_operatorInterface.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.TempControlSoftwareSystem_p_Instance_tcproc_operatorInterface.id).get
      return postContainer_.asInstanceOf[tc.TempControlSoftwareSystem.OperatorInterfacePeriodic_p_tcproc_operatorInterface_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.TempControlSoftwareSystem_p_Instance_tcproc_operatorInterface.name}")
      halt(s"No post state recorded for ${Arch.TempControlSoftwareSystem_p_Instance_tcproc_operatorInterface.name}")
    }
  }

  def check_concrete_outputs(api_setPoint: TempControlSoftwareSystem.SetPoint_i): Unit = {
    var failureReasons: ISZ[ST] = ISZ()

    val actual_setPoint = get_api_setPoint()
    if (api_setPoint != actual_setPoint) {
      failureReasons = failureReasons :+ st"'setPoint' did not match expected.  Expected: $api_setPoint, Actual: $actual_setPoint"
    }

    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }

  def get_api_setPoint(): TempControlSoftwareSystem.SetPoint_i = {
    return fetchContainer().api_setPoint
  }
}